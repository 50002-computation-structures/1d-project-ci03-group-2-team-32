module game_cu #(
    COLUMN_DIMENSION = 16d16 : COLUMN_DIMENSION > 0,
    ROW_DIMENSION = 16d16 : ROW_DIMENSION > 0,
    PIXEL_COUNT = 16d256 : PIXEL_COUNT > 0,
    BUFFER_SIZE = 1024 : BUFFER_SIZE > 0
) (
    input clk,  // clock
    input rst,  // reset
    input regfile_rd2[32],
    input bullet_slow_clk_out,
    
    //    input red_bullet_btn,
    //    input green_bullet_btn,
    //    input blue_bullet_btn,
    input left_btn,
    input right_btn,
    //input shoot_btn,
    input redshoot_btn,
    input greenshoot_btn,
    //input blueshoot_btn,
    input start_btn,
    
    output alufn_signal[6],
    output asel[3],
    output bsel[3],
    output wdsel[2],
    output regfile_wa[5],
    output regfile_ra1[5],
    output regfile_ra2[5],
    output regfile_we,
    output debug[4]
) {
    enum GameStates {
        // Init Game
        START,
        SET_ENEMY_A, SET_ENEMY_A_ACTIVE, SET_ENEMY_B, SET_ENEMY_B_ACTIVE, SET_ENEMY_C, SET_ENEMY_C_ACTIVE,
        
        // Player's Input
        IDLE,
        CHECK_RIGHT_BOUND, CHECK_LEFT_BOUND,MOVE_RIGHT, MOVE_LEFT,
        SET_RED_BULLET_COLOR, SET_GREEN_BULLET_COLOR, SET_BLUE_BULLET_COLOR,
        BULLET_ACTIVE, BULLET_X_POS, BULLET_ENCODING_XYCOLOR, // 4 stages saved
        
        // Bullet Moving and Checking Hit Logic
        CHECK_BULLET_BOUNDARY, BULLET_MOVE, BULLET_ENCODING_Y,
        CHECK_ENEMY_A_HIT, ENEMY_A_COLLIDED, ENEMY_A_DIED, SET_ENEMY_A_INACTIVE,
        CHECK_ENEMY_B_HIT, ENEMY_B_COLLIDED, ENEMY_B_DIED, SET_ENEMY_B_INACTIVE,
        CHECK_ENEMY_C_HIT, ENEMY_C_COLLIDED, ENEMY_C_DIED, SET_ENEMY_C_INACTIVE,
        
        // Reset Bullet Once Hit
        BULLET_RESET_Y, BULLET_INACTIVE,
        
        // Next Enemy Wave
        INCR_SCORE, ADD_ENEMY_ACTIVE_AB, ADD_ENEMY_ACTIVE_ABC, CHECK_ALL_ENEMY_DEAD, INCR_WAVE
    }
    // User input
    //const CLK_FREQ = $is_sim() ? 1000 : 100000000
    //button_conditioner movement_button[5](.clk(5x{{clk}}), #CLK_FREQ(5x{{CLK_FREQ}}))
    //edge_detector movement_button_edge[5](.clk(5x{{clk}}), #RISE(5x{{1}}), #FALL(5x{{0}}))
    .clk(clk){
        edge_detector bullet_slow_clk_edge(#RISE(1),#FALL(0))
        .rst(rst){
            dff game_fsm[$width(GameStates)](#INIT(GameStates.START))
        }
    }
    
    always {
        bullet_slow_clk_edge.in = bullet_slow_clk_out
        
        // standard setting unless otherwise overwritten by each case 
        alufn_signal = 0
        asel = 0 
        bsel = 0
        regfile_we = 0
        regfile_wa = d6 
        regfile_ra1 = d0
        regfile_ra2 = d0
        wdsel = 0
        
        debug = b0000
        
        if (rst){
            game_fsm.d = GameStates.IDLE
        }
        else{
            
            case(game_fsm.q){ 
                GameStates.START:
                    if (start_btn){
                        game_fsm.d = GameStates.SET_ENEMY_A
                    }
                    else{
                        game_fsm.d = GameStates.START
                    } 
                
                GameStates.SET_ENEMY_A:
                    wdsel = b01  // Write Enemy A's X position
                    regfile_we = 1
                    regfile_wa = d15  // Address for Enemy A's 
                    game_fsm.d = GameStates.SET_ENEMY_A_ACTIVE
                
                GameStates.SET_ENEMY_A_ACTIVE:
                    alufn_signal = b000000        //ADD
                    bsel = b001                    // 1
                    asel = b001                     // 0             
                    regfile_we = 1
                    regfile_wa = d4               // enemyA_active
                    game_fsm.d = GameStates.SET_ENEMY_B
                
                GameStates.SET_ENEMY_B:
                    wdsel = b10  // Write Enemy A's X position
                    regfile_we = 1
                    regfile_wa = d16  // Address for Enemy B's X
                    game_fsm.d = GameStates.SET_ENEMY_B_ACTIVE
                
                GameStates.SET_ENEMY_B_ACTIVE:
                    alufn_signal = b000000        //ADD
                    bsel = b001                    // 1
                    asel = b001                     // 0             
                    regfile_we = 1
                    regfile_wa = d5               // enemyB_active
                    game_fsm.d = GameStates.SET_ENEMY_C
                
                GameStates.SET_ENEMY_C:
                    wdsel = b11  // Write Enemy C's X position
                    regfile_we = 1
                    regfile_wa = d17  // Address for Enemy C's X
                    game_fsm.d = GameStates.SET_ENEMY_C_ACTIVE
                
                GameStates.SET_ENEMY_C_ACTIVE:
                    alufn_signal = b000000        //ADD
                    bsel = b001                    // 1
                    asel = b001                     // 0             
                    regfile_we = 1
                    regfile_wa = d9               // enemyC_active
                    game_fsm.d = GameStates.IDLE
                
                // when enemy die, change color to background, set pos to 0,0 incre score, set inactive 
                GameStates.IDLE: 
                    if (right_btn){     // check movement update x right
                        game_fsm.d = GameStates.CHECK_RIGHT_BOUND
                    }
                    else if(left_btn){
                        game_fsm.d = GameStates.CHECK_LEFT_BOUND 
                    }
                    else if(redshoot_btn){ // check the button color
                        regfile_ra2 = d13
                        if(~regfile_rd2[0]){ // only set bullet_active when bullet NOT active
                            game_fsm.d = GameStates.SET_RED_BULLET_COLOR
                        }
                    }
                    else if(greenshoot_btn){ // check the button color
                        regfile_ra2 = d13
                        if(~regfile_rd2[0]){ // only set bullet_active when bullet NOT active
                            game_fsm.d = GameStates.SET_GREEN_BULLET_COLOR
                        }
                    }
                    //else if(blueshoot_btn){ // check the button color
                    //    regfile_ra2 = d13
                    //    if(~regfile_rd2[0]){ // only set bullet_active when bullet NOT active
                    //        game_fsm.d = GameStates.SET_BLUE_BULLET_COLOR
                    //    }
                    //} 
                    else{
                        regfile_ra2 = d13
                        if(regfile_rd2[0] & bullet_slow_clk_edge.out){ // bullet is active and edge high
                            game_fsm.d = GameStates.CHECK_BULLET_BOUNDARY
                        }
                        else{
                            game_fsm.d =  GameStates.IDLE
                        }
                    }
                
                GameStates.CHECK_RIGHT_BOUND:
                    alufn_signal = b110101        //CMPLT
                    regfile_ra1 = d0              
                    bsel = b010                    //constant 14 (16-2) 
                    asel = b000                                  
                    regfile_we = 1
                    regfile_wa = d11               // temp check right bound
                    game_fsm.d = GameStates.MOVE_RIGHT
                
                GameStates.CHECK_LEFT_BOUND:
                    alufn_signal = b110101        //CMPLT
                    regfile_ra1 = d0              
                    bsel = b011                    //constant 2 
                    asel = b000                                  
                    regfile_we = 1
                    regfile_wa = d11               // temp check bound
                    game_fsm.d = GameStates.MOVE_LEFT
                
                GameStates.MOVE_RIGHT:
                    regfile_ra2 = d11
                    if (regfile_rd2[0]){
                        alufn_signal = b000000         //ADD
                        regfile_ra1 = d0              
                        bsel = b001                    //1
                        asel = b000                                  
                        regfile_we = 1
                        regfile_wa = d0               // player x
                        game_fsm.d = GameStates.IDLE
                    }
                    else{
                        game_fsm.d = GameStates.IDLE
                    }
                
                GameStates.MOVE_LEFT:
                    regfile_ra2 = d11
                    if (~regfile_rd2[0]){
                        alufn_signal = b000001         //SUB
                        regfile_ra1 = d0              
                        bsel = b001                    //1
                        asel = b000                                  
                        regfile_we = 1
                        regfile_wa = d0               // player x
                        game_fsm.d = GameStates.IDLE
                    }
                    else{
                        game_fsm.d = GameStates.IDLE
                    }
                
                GameStates.SET_RED_BULLET_COLOR:
                    alufn_signal = b000000        // ADD
                    bsel = b001                     // constant 1
                    asel = b001                     // constant 0            
                    regfile_we = 1
                    regfile_wa = d6                 // write bullet color
                    game_fsm.d = GameStates.BULLET_ACTIVE
                
                GameStates.SET_GREEN_BULLET_COLOR:
                    alufn_signal = b000000        // ADD
                    bsel = b011                     // constant 2
                    asel = b001                     // constant 0             
                    regfile_we = 1
                    regfile_wa = d6                 // write bullet color
                    game_fsm.d = GameStates.BULLET_ACTIVE
                
                GameStates.SET_BLUE_BULLET_COLOR:
                    alufn_signal = b000000        // ADD
                    bsel = b101                     // constant 3
                    asel = b001                     // constant 0             
                    regfile_we = 1
                    regfile_wa = d6                 // write bullet color
                    game_fsm.d = GameStates.BULLET_ACTIVE
                
                GameStates.BULLET_ACTIVE:
                    alufn_signal = b000000        //ADD
                    bsel = b001                    // 1
                    asel = b001                     // 0             
                    regfile_we = 1
                    regfile_wa = d13               // bul_active
                    game_fsm.d = GameStates.BULLET_X_POS
                
                GameStates.BULLET_X_POS:
                    alufn_signal = b000010        //MUL 
                    regfile_ra1 = d0              
                    bsel = b001                    //constant 1
                    asel = b000                                  
                    regfile_we = 1
                    regfile_wa = d7               // bullet_x
                    game_fsm.d = GameStates.BULLET_ENCODING_XYCOLOR
                
                GameStates.BULLET_ENCODING_XYCOLOR:
                    alufn_signal = b111110        // bullet_encoding
                    regfile_ra1 = d7              // bullet_x
                    regfile_ra2 = d6              // bullet_color
                    bsel = b000                   // read from regfile
                    asel = b000                   // read from regfile               
                    regfile_we = 1
                    regfile_wa = d10               // bullet encoding
                    game_fsm.d = GameStates.IDLE
                
                // removed xycolor state, moved alu fn signal up before repeat
                // if game fail means encoding xycolor causing problem
                // this is bullet init to encode  
                
                GameStates.CHECK_BULLET_BOUNDARY:
                    alufn_signal = b110101        //CMPLT
                    regfile_ra1 = d8              // bullet_y
                    bsel = b001                   //constant 1
                    asel = b000                                  
                    regfile_we = 1
                    regfile_wa = d11               // check boundary
                    game_fsm.d = GameStates.BULLET_MOVE
                
                GameStates.BULLET_MOVE:
                    regfile_ra2 = d11
                    if (~regfile_rd2[0]){// if bullet y > 1
                        alufn_signal = b000001        //SUB
                        regfile_ra1 = d8              
                        bsel = b001                    //constant 1
                        asel = b000                                  
                        regfile_we = 1
                        regfile_wa = d8               // bullet_y
                        game_fsm.d = GameStates.BULLET_ENCODING_Y
                    }
                    else{             //reset bullet _y pos         
                        game_fsm.d = GameStates.BULLET_RESET_Y
                    }
                
                GameStates.BULLET_ENCODING_Y:
                    alufn_signal = b111111        // data_encode
                    regfile_ra1 = d10              // bullet_encode
                    regfile_ra2 = d8              // bullet_y
                    bsel = b000                   // read from regfile 
                    asel = b000                   // read from regfile               
                    regfile_we = 1
                    regfile_wa = d10               // bullet encoding
                    game_fsm.d = GameStates.CHECK_ENEMY_A_HIT
                
                GameStates.CHECK_ENEMY_A_HIT: // return hit flag
                    alufn_signal = b110011        // CMPEQ
                    regfile_ra1 = d10              // bullet_encode
                    regfile_ra2 = d15              // enemy_encode
                    bsel = b000                   // read from regfile 
                    asel = b000                   // read from regfile               
                    regfile_we = 1
                    regfile_wa = d18               // check enemy condition
                    game_fsm.d = GameStates.ENEMY_A_COLLIDED  // go to idle then
                
                GameStates.ENEMY_A_COLLIDED: // check hit flag
                    regfile_ra2 = d18
                    if (regfile_rd2[0]){              // XYCOLOR HIT
                        game_fsm.d = GameStates.ENEMY_A_DIED 
                    } 
                    else{
                        game_fsm.d = GameStates.CHECK_ENEMY_B_HIT 
                    }
                
                GameStates.ENEMY_A_DIED: // set enemy info to color to 0
                    alufn_signal = b111101        // enemy_color_encode
                    regfile_ra1 = d15              // enemy A                                       
                    bsel = b100                   // 0
                    asel = b000                   // regfile
                    regfile_we = 1    
                    regfile_wa = d15  // Address for Enemy A's 
                    game_fsm.d = GameStates.SET_ENEMY_A_INACTIVE
                
                GameStates.SET_ENEMY_A_INACTIVE:
                    alufn_signal = b000000        //ADD
                    bsel = b100                    // 0
                    asel = b001                     // 0             
                    regfile_we = 1
                    regfile_wa = d4               // enemyA_active
                    game_fsm.d = GameStates.INCR_SCORE
                
                GameStates.CHECK_ENEMY_B_HIT: // return hit flag
                    alufn_signal = b110011        // CMPEQ
                    regfile_ra1 = d10              // bullet_encode
                    regfile_ra2 = d16              // enemy_A_encode
                    bsel = b000                   // read from regfile 
                    asel = b000                   // read from regfile               
                    regfile_we = 1
                    regfile_wa = d18               // check enemy condition
                    game_fsm.d = GameStates.ENEMY_B_COLLIDED  // go to idle then
                
                GameStates.ENEMY_B_COLLIDED:
                    regfile_ra2 = d18
                    if (regfile_rd2[0]){              // XYCOLOR HIT
                        game_fsm.d = GameStates.ENEMY_B_DIED 
                    } 
                    else{
                        game_fsm.d = GameStates.CHECK_ENEMY_C_HIT 
                    }
                
                GameStates.ENEMY_B_DIED: // set enemy info to xycolor to 0
                    alufn_signal = b111101        // color encode
                    regfile_ra1 = d16              // enemy B                                       
                    bsel = b100                   // 0
                    asel = b000                   // regfile
                    regfile_we = 1 
                    regfile_wa = d16  // Address for Enemy B's 
                    game_fsm.d = GameStates.SET_ENEMY_B_INACTIVE
                
                GameStates.SET_ENEMY_B_INACTIVE:
                    alufn_signal = b000000        //ADD
                    bsel = b100                    // 0
                    asel = b001                     // 0             
                    regfile_we = 1
                    regfile_wa = d5               // enemyB_active
                    game_fsm.d = GameStates.INCR_SCORE
                
                GameStates.CHECK_ENEMY_C_HIT: // return hit flag
                    alufn_signal = b110011        // CMPEQ
                    regfile_ra1 = d10              // bullet_encode
                    regfile_ra2 = d17              // enemy_C_encode
                    bsel = b000                   // read from regfile 
                    asel = b000                   // read from regfile               
                    regfile_we = 1
                    regfile_wa = d18               // check enemy condition
                    game_fsm.d = GameStates.ENEMY_C_COLLIDED  // go to idle then
                
                GameStates.ENEMY_C_COLLIDED:
                    regfile_ra2 = d18
                    if (regfile_rd2[0]){              // XYCOLOR HIT
                        game_fsm.d = GameStates.ENEMY_C_DIED 
                    } 
                    else{
                        game_fsm.d = GameStates.IDLE 
                    }
                GameStates.ENEMY_C_DIED: // set enemy info to xycolor to 0
                    alufn_signal = b111101        // enemy_color_encode
                    regfile_ra1 = d17              // enemy C                                       
                    bsel = b100                   // 0
                    asel = b000                   // regfile
                    regfile_we = 1 
                    regfile_wa = d17  // Address for Enemy C's 
                    game_fsm.d = GameStates.SET_ENEMY_C_INACTIVE
                
                GameStates.SET_ENEMY_C_INACTIVE:
                    alufn_signal = b000000        //ADD
                    bsel = b100                    // 0
                    asel = b001                     // 0             
                    regfile_we = 1
                    regfile_wa = d9               // enemyC_active
                    game_fsm.d = GameStates.INCR_SCORE
                
                GameStates.INCR_SCORE:
                    alufn_signal = b000000        // ADD
                    regfile_ra1 = d3              // score
                    bsel = b001                   // constant 1
                    asel = b000                   // read from regfile               
                    regfile_we = 1
                    regfile_wa = d3               
                    game_fsm.d = GameStates.BULLET_RESET_Y  
                
                GameStates.BULLET_RESET_Y:
                    alufn_signal = b000010         //MUL
                    bsel = b001                    //constant 1 
                    asel = b010                     //constant 13             
                    regfile_we = 1
                    regfile_wa = d8               // bullet_y
                    game_fsm.d = GameStates.BULLET_INACTIVE
                
                GameStates.BULLET_INACTIVE:
                    alufn_signal = b000010        //MUL
                    bsel = b001                    
                    asel = b001                     //constant 0             
                    regfile_we = 1
                    regfile_wa = d13               // bul_active
                    game_fsm.d = GameStates.ADD_ENEMY_ACTIVE_AB
                
                GameStates.ADD_ENEMY_ACTIVE_AB:
                    alufn_signal = b000000        // ADD
                    regfile_ra1 = d4              // enemy_A_active
                    regfile_ra2 = d5              // enemy_A_active
                    bsel = b000                    // regfile
                    asel = b000                     // regfile             
                    regfile_we = 1
                    regfile_wa = d19               // temp_reg1
                    game_fsm.d = GameStates.ADD_ENEMY_ACTIVE_ABC
                
                GameStates.ADD_ENEMY_ACTIVE_ABC:
                    alufn_signal = b000000        // ADD
                    regfile_ra1 = d19              // temp_reg1
                    regfile_ra2 = d9              // enemy_C_active
                    bsel = b000                    // regfile
                    asel = b000                     // regfile             
                    regfile_we = 1
                    regfile_wa = d19               // temp_reg1
                    game_fsm.d = GameStates.CHECK_ALL_ENEMY_DEAD
                
                GameStates.CHECK_ALL_ENEMY_DEAD:
                    alufn_signal = b110011        // CMPEQ
                    regfile_ra1 = d19              // temp_reg
                    bsel = b100                    // 0
                    asel = b000                     // regfile             
                    regfile_we = 1
                    regfile_wa = d19               // temp_reg
                    game_fsm.d = GameStates.INCR_WAVE
                
                GameStates.INCR_WAVE:
                    regfile_ra2 = d19
                    if (regfile_rd2[0]) {
                        alufn_signal = b000000        // ADD
                        regfile_ra1 = d14              // enemy_stage_pointer
                        bsel = b001                    // 1
                        asel = b000                     // regfile             
                        regfile_we = 1
                        regfile_wa = d14               // enemy_stage_pointer
                        game_fsm.d = GameStates.SET_ENEMY_A                        
                    } else{
                        game_fsm.d = GameStates.IDLE
                    }
            }
        }
    }
}
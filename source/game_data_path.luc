module game_data_path #(
    COLUMN_DIMENSION = 16d16 : COLUMN_DIMENSION > 0,
    ROW_DIMENSION = 16d16 : ROW_DIMENSION > 0,
    PIXEL_COUNT = 16d256 : PIXEL_COUNT > 0,
    BUFFER_SIZE = 1024 : BUFFER_SIZE > 0,
    BULLET_SLOW_CLK_DIV ~ 24 : BULLET_SLOW_CLK_DIV > 0
) (
    // Player controls
    //input red_bullet_btn,
    //input green_bullet_btn,
    //input blue_bullet_btn,
    input left_btn,
    input right_btn,
    input shoot_btn,
    
    //input start_button,
    input clk,  // clock
    input rst,  // reset
    
    //TEST
    //input io_button[5],
    
    // Outputs
    output player_pos_x_out[32], // R0
    output player_pos_y_out[32], // R1
    output player_health_out[32], // R2
    output timer_out[32], // R3
    output score_out[32], // R4
    output sprite_out[32], // R5
    output bullet_color_out[32], // R6
    output player_bullet_x_out[32], // R7
    output player_bullet_y_out[32], // R8
    output enemy_encoding_out[32], // R9 
    output stage_counter_out[32], // R10  
    
    output led[8],
    output io_led[3][8],
    output io_segment[8],
    output io_select[4],
    output bullet_slow_clk_out,
    output data_out
) {
    sig input_alu_a[32]
    sig input_alu_b[32]
    
    alu game_alu
    
    .clk(clk){
        // Clock modules
        //variable_timer variable_timer_clock(#FAST_CLOCK_DIV(FAST_CLOCK_DIV), .rst(rst))
        counter bullet_slow_clk(#SIZE(1), #DIV(BULLET_SLOW_CLK_DIV), .rst(rst))
        
        game_cu game_cu(
            //.io_button(io_button),
            //.red_bullet_btn(red_bullet_btn),
            //.green_bullet_btn(green_bullet_btn),
            //.blue_bullet_btn(blue_bullet_btn),
            .left_btn(left_btn),
            .right_btn(right_btn),
            .shoot_btn(shoot_btn),
            .bullet_slow_clk_out(bullet_slow_clk.value),
            
            //.start(start_button),
            .rst(rst)
        )
        
        // REGFILE
        game_regfile game_regfile(
            .we(game_cu.regfile_we),
            .wa(game_cu.regfile_wa),
            .ra1(game_cu.regfile_ra1),
            .ra2(game_cu.regfile_ra2),
            .rst(rst)
            
        )
        
        ram_mode ram_mode(
            .left_btn(left_btn),
            .right_btn(right_btn),
            .shoot_btn(shoot_btn),
            .player_pos_x_out(game_regfile.player_pos_x_out),
            .player_pos_y_out(game_regfile.player_pos_y_out),
            .player_bullet_x_out(game_regfile.player_bullet_x_out),
            .player_bullet_y_out(game_regfile.player_bullet_y_out),
            .bullet_active_out(game_regfile.bullet_active_out),
            .bullet_slow_clk_out(bullet_slow_clk.value),
            .check_boundary_out(game_regfile.check_boundary_out),
            .rst(rst)
        )
        
    }
    always {
        // bootstrap rd2 output to CU for convenient branching conditions
        game_cu.regfile_rd2 = game_regfile.rd2
        data_out = ram_mode.data
        io_segment = 8hff
        io_select = 4hf
        led = 8b0
        io_led[0] = ram_mode.io_led[0]
        io_led[1] = ram_mode.io_led[1]
        io_led[2] = ram_mode.io_led[2]
        led = ram_mode.led
        // ASEL mux
        case (game_cu.asel) {
            b000 : input_alu_a = game_regfile.rd1
            b001 : input_alu_a = 0
            b010 : input_alu_a = 13
            default : input_alu_a = 0
        }
        
        // BSEL mux
        case (game_cu.bsel) {
            b000 : input_alu_b = game_regfile.rd2
            b001 : input_alu_b = 1
            b010 : input_alu_b = 14
            b011 : input_alu_b = 2
            b100 : input_alu_b = 0
            default: input_alu_b = 0
        }
        
        game_alu.a = input_alu_a
        game_alu.b = input_alu_b
        game_alu.alufn_signal = game_cu.alufn_signal
        
        // WDSEL mux for writing back to REGFILE
        case (game_cu.wdsel) {
            b00 : game_regfile.regfile_data = game_alu.out
            b11 : game_regfile.regfile_data = 0
            default : game_regfile.regfile_data = game_alu.out
        }
        player_pos_x_out = game_regfile.player_pos_x_out
        player_pos_y_out = game_regfile.player_pos_y_out
        player_health_out = game_regfile.player_health_out
        timer_out = game_regfile.timer_out
        score_out = game_regfile.score_out
        sprite_out = game_regfile.sprite_out
        bullet_color_out = game_regfile.bullet_color_out
        player_bullet_x_out = game_regfile.player_bullet_x_out
        player_bullet_y_out = game_regfile.player_bullet_y_out
        enemy_encoding_out = game_regfile.enemy_encoding_out
        stage_counter_out = game_regfile.stage_counter_out  
        bullet_slow_clk_out = bullet_slow_clk.value
    }
}
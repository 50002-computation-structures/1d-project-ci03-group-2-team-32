/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module data_ram #(
        parameter ROW_DIMENSION = 4'h8,
        parameter COLUMN_DIMENSION = 4'h8,
        parameter ENCODING_AMOUNT = 3'h4
    ) (
        input wire clk,
        input wire rst,
        input wire update,
        input wire [($clog2(COLUMN_DIMENSION))-1:0] player_x_pos,
        input wire [($clog2(ROW_DIMENSION))-1:0] player_y_pos,
        input wire [2:0] bullet_colour_out,
        input wire [($clog2(COLUMN_DIMENSION))-1:0] bullet_x,
        input wire [($clog2(ROW_DIMENSION))-1:0] bullet_y,
        input wire bullet_active,
        input wire [($clog2((5'h10)'(ROW_DIMENSION * COLUMN_DIMENSION)))-1:0] address,
        input wire [($clog2(COLUMN_DIMENSION))-1:0] enemy_A_x,
        input wire [($clog2(ROW_DIMENSION))-1:0] enemy_A_y,
        input wire [2:0] enemy_A_color,
        input wire [($clog2(COLUMN_DIMENSION))-1:0] enemy_B_x,
        input wire [($clog2(ROW_DIMENSION))-1:0] enemy_B_y,
        input wire [2:0] enemy_B_color,
        input wire [($clog2(COLUMN_DIMENSION))-1:0] enemy_C_x,
        input wire [($clog2(ROW_DIMENSION))-1:0] enemy_C_y,
        input wire [2:0] enemy_C_color,
        output reg [2:0] out_encoding,
        output reg ready,
        output reg [($clog2((5'h10)'(ROW_DIMENSION * COLUMN_DIMENSION)))-1:0] debug_address_pointer,
        output reg [2:0] debug_data
    );
    localparam DEPTH = (5'h10)'(COLUMN_DIMENSION * ROW_DIMENSION);
    localparam E_States_CLEAR = 5'h0;
    localparam E_States_WRITE_TOP = 5'h1;
    localparam E_States_WRITE_BOTTOM_RIGHT = 5'h2;
    localparam E_States_WRITE_BOTTOM_MIDDLE = 5'h3;
    localparam E_States_WRITE_BOTTOM_LEFT = 5'h4;
    localparam E_States_ERASE_TOP = 5'h5;
    localparam E_States_ERASE_BOTTOM_MIDDLE = 5'h6;
    localparam E_States_ERASE_BOTTOM_LEFT = 5'h7;
    localparam E_States_ERASE_BOTTOM_RIGHT = 5'h8;
    localparam E_States_WRITE_BULLET = 5'h9;
    localparam E_States_ERASE_BULLET = 5'ha;
    localparam E_States_WRITE_ENEMY_A_PIXEL1 = 5'hb;
    localparam E_States_WRITE_ENEMY_A_PIXEL2 = 5'hc;
    localparam E_States_WRITE_ENEMY_A_PIXEL3 = 5'hd;
    localparam E_States_WRITE_ENEMY_A_PIXEL4 = 5'he;
    localparam E_States_WRITE_ENEMY_A_PIXEL5 = 5'hf;
    localparam E_States_WRITE_ENEMY_A_PIXEL6 = 5'h10;
    localparam E_States_WRITE_ENEMY_B_PIXEL1 = 5'h11;
    localparam E_States_WRITE_ENEMY_B_PIXEL2 = 5'h12;
    localparam E_States_WRITE_ENEMY_B_PIXEL3 = 5'h13;
    localparam E_States_WRITE_ENEMY_B_PIXEL4 = 5'h14;
    localparam E_States_WRITE_ENEMY_B_PIXEL5 = 5'h15;
    localparam E_States_WRITE_ENEMY_B_PIXEL6 = 5'h16;
    localparam E_States_WRITE_ENEMY_C_PIXEL1 = 5'h17;
    localparam E_States_WRITE_ENEMY_C_PIXEL2 = 5'h18;
    localparam E_States_WRITE_ENEMY_C_PIXEL3 = 5'h19;
    localparam E_States_WRITE_ENEMY_C_PIXEL4 = 5'h1a;
    localparam E_States_WRITE_ENEMY_C_PIXEL5 = 5'h1b;
    localparam E_States_WRITE_ENEMY_C_PIXEL6 = 5'h1c;
    localparam E_States_IDLE = 5'h1d;
    logic [($clog2(DEPTH))-1:0] D_writer_pointer_d, D_writer_pointer_q = 1'h0;
    logic [4:0] D_fsm_d, D_fsm_q = 5'h0;
    logic [($clog2(DEPTH))-1:0] D_player_writer_pointer_d, D_player_writer_pointer_q = 1'h0;
    logic [($clog2(DEPTH))-1:0] D_bullet_writer_pointer_d, D_bullet_writer_pointer_q = 1'h0;
    logic D_update_flag_d, D_update_flag_q = 1'h0;
    logic D_bullet_written_d, D_bullet_written_q = 1'h0;
    logic [($clog2(DEPTH))-1:0] D_bullet_last_addr_d, D_bullet_last_addr_q = 1'h0;
    logic D_init_d, D_init_q = 1'h1;
    logic [($clog2(DEPTH))-1:0] D_enemy_A_writer_pointer_d, D_enemy_A_writer_pointer_q = 1'h0;
    logic [($clog2(DEPTH))-1:0] D_enemy_B_writer_pointer_d, D_enemy_B_writer_pointer_q = 1'h0;
    logic [($clog2(DEPTH))-1:0] D_enemy_C_writer_pointer_d, D_enemy_C_writer_pointer_q = 1'h0;
    localparam BACKGROUND_COLOR = 2'h0;
    localparam PLAYER_COLOR = 3'h4;
    localparam _MP_WIDTH_1428315341 = $clog2(ENCODING_AMOUNT);
    localparam _MP_ENTRIES_1428315341 = DEPTH;
    logic [((($clog2(_MP_ENTRIES_1428315341)-1) - (0) + 1))-1:0] M_ram_waddr;
    logic [(((_MP_WIDTH_1428315341-1) - (0) + 1))-1:0] M_ram_write_data;
    logic M_ram_write_enable;
    logic [((($clog2(_MP_ENTRIES_1428315341)-1) - (0) + 1))-1:0] M_ram_raddr;
    logic [(((_MP_WIDTH_1428315341-1) - (0) + 1))-1:0] M_ram_read_data;
    
    simple_dual_port_ram #(
        .WIDTH(_MP_WIDTH_1428315341),
        .ENTRIES(_MP_ENTRIES_1428315341)
    ) ram (
        .rclk(clk),
        .wclk(clk),
        .waddr(M_ram_waddr),
        .write_data(M_ram_write_data),
        .write_enable(M_ram_write_enable),
        .raddr(M_ram_raddr),
        .read_data(M_ram_read_data)
    );
    
    
    always @* begin
        D_writer_pointer_d = D_writer_pointer_q;
        D_player_writer_pointer_d = D_player_writer_pointer_q;
        D_bullet_writer_pointer_d = D_bullet_writer_pointer_q;
        D_fsm_d = D_fsm_q;
        D_update_flag_d = D_update_flag_q;
        D_bullet_written_d = D_bullet_written_q;
        D_bullet_last_addr_d = D_bullet_last_addr_q;
        D_enemy_A_writer_pointer_d = D_enemy_A_writer_pointer_q;
        D_enemy_B_writer_pointer_d = D_enemy_B_writer_pointer_q;
        D_enemy_C_writer_pointer_d = D_enemy_C_writer_pointer_q;
        D_init_d = D_init_q;
        
        M_ram_raddr = 1'h0;
        M_ram_waddr = 1'h0;
        M_ram_write_data = 1'h0;
        M_ram_write_enable = 1'h0;
        out_encoding = 1'h0;
        debug_data = 1'h0;
        D_writer_pointer_d = D_writer_pointer_q;
        D_player_writer_pointer_d = D_player_writer_pointer_q;
        D_bullet_writer_pointer_d = D_bullet_writer_pointer_q;
        D_fsm_d = D_fsm_q;
        D_update_flag_d = D_update_flag_q;
        D_bullet_written_d = D_bullet_written_q;
        D_bullet_last_addr_d = D_bullet_last_addr_q;
        D_enemy_A_writer_pointer_d = D_enemy_A_writer_pointer_q;
        D_enemy_B_writer_pointer_d = D_enemy_B_writer_pointer_q;
        D_enemy_C_writer_pointer_d = D_enemy_C_writer_pointer_q;
        ready = D_fsm_q == 5'h1d;
        D_init_d = D_init_q;
        if (update) begin
            D_update_flag_d = 1'h1;
        end
        
        case (D_fsm_q)
            5'h0: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_writer_pointer_q;
                M_ram_write_data = 2'h0;
                D_writer_pointer_d = D_writer_pointer_q + 1'h1;
                if ((&D_writer_pointer_q)) begin
                    D_writer_pointer_d = 1'h0;
                    D_fsm_d = 5'h1;
                    D_player_writer_pointer_d = player_y_pos * COLUMN_DIMENSION + player_x_pos;
                end
                debug_data = 2'h1;
            end
            5'h1: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_player_writer_pointer_q;
                M_ram_write_data = 3'h4;
                D_fsm_d = 5'h3;
                debug_data = 2'h2;
            end
            5'h3: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_player_writer_pointer_q + COLUMN_DIMENSION;
                M_ram_write_data = 3'h4;
                D_fsm_d = 5'h4;
                debug_data = 2'h2;
            end
            5'h4: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_player_writer_pointer_q + 1'h1 + COLUMN_DIMENSION;
                M_ram_write_data = 3'h4;
                D_fsm_d = 5'h2;
            end
            5'h2: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_player_writer_pointer_q + COLUMN_DIMENSION - 1'h1;
                M_ram_write_data = 3'h4;
                D_fsm_d = 5'hb;
                D_enemy_A_writer_pointer_d = enemy_A_y * COLUMN_DIMENSION + enemy_A_x;
                D_enemy_B_writer_pointer_d = enemy_B_y * COLUMN_DIMENSION + enemy_B_x;
                D_enemy_C_writer_pointer_d = enemy_C_y * COLUMN_DIMENSION + enemy_C_x;
            end
            5'hb: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_A_writer_pointer_q;
                M_ram_write_data = enemy_A_color;
                D_fsm_d = 5'hc;
            end
            5'hc: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_A_writer_pointer_q - COLUMN_DIMENSION;
                M_ram_write_data = enemy_A_color;
                D_fsm_d = 5'hd;
            end
            5'hd: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_A_writer_pointer_q + 1'h1;
                M_ram_write_data = enemy_A_color;
                D_fsm_d = 5'he;
            end
            5'he: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_A_writer_pointer_q - 1'h1;
                M_ram_write_data = enemy_A_color;
                D_fsm_d = 5'hf;
            end
            5'hf: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_A_writer_pointer_q + 1'h1 + COLUMN_DIMENSION;
                M_ram_write_data = enemy_A_color;
                D_fsm_d = 5'h10;
            end
            5'h10: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_A_writer_pointer_q + COLUMN_DIMENSION - 1'h1;
                M_ram_write_data = enemy_A_color;
                D_fsm_d = 5'h11;
                D_enemy_A_writer_pointer_d = D_enemy_A_writer_pointer_q;
            end
            5'h11: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_B_writer_pointer_q;
                M_ram_write_data = enemy_B_color;
                D_fsm_d = 5'h12;
            end
            5'h12: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_B_writer_pointer_q - COLUMN_DIMENSION;
                M_ram_write_data = enemy_B_color;
                D_fsm_d = 5'h13;
            end
            5'h13: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_B_writer_pointer_q + 1'h1;
                M_ram_write_data = enemy_B_color;
                D_fsm_d = 5'h14;
            end
            5'h14: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_B_writer_pointer_q - 1'h1;
                M_ram_write_data = enemy_B_color;
                D_fsm_d = 5'h15;
            end
            5'h15: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_B_writer_pointer_q + 1'h1 + COLUMN_DIMENSION;
                M_ram_write_data = enemy_B_color;
                D_fsm_d = 5'h16;
            end
            5'h16: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_B_writer_pointer_q + COLUMN_DIMENSION - 1'h1;
                M_ram_write_data = enemy_B_color;
                D_fsm_d = 5'h17;
                D_enemy_B_writer_pointer_d = D_enemy_B_writer_pointer_q;
            end
            5'h17: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_C_writer_pointer_q;
                M_ram_write_data = enemy_C_color;
                D_fsm_d = 5'h18;
            end
            5'h18: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_C_writer_pointer_q - COLUMN_DIMENSION;
                M_ram_write_data = enemy_C_color;
                D_fsm_d = 5'h19;
            end
            5'h19: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_C_writer_pointer_q + 1'h1;
                M_ram_write_data = enemy_C_color;
                D_fsm_d = 5'h1a;
            end
            5'h1a: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_C_writer_pointer_q - 1'h1;
                M_ram_write_data = enemy_C_color;
                D_fsm_d = 5'h1b;
            end
            5'h1b: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_C_writer_pointer_q + 1'h1 + COLUMN_DIMENSION;
                M_ram_write_data = enemy_C_color;
                D_fsm_d = 5'h1c;
            end
            5'h1c: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_enemy_C_writer_pointer_q + COLUMN_DIMENSION - 1'h1;
                M_ram_write_data = enemy_C_color;
                D_enemy_C_writer_pointer_d = D_enemy_C_writer_pointer_q;
                if (bullet_active && D_bullet_written_q) begin
                    D_bullet_writer_pointer_d = D_bullet_last_addr_q;
                    D_fsm_d = 5'ha;
                end else begin
                    if (bullet_active && !D_bullet_written_q) begin
                        D_bullet_writer_pointer_d = bullet_y * COLUMN_DIMENSION + bullet_x;
                        D_fsm_d = 5'h9;
                    end else begin
                        if (!bullet_active && D_bullet_written_q) begin
                            D_bullet_writer_pointer_d = D_bullet_last_addr_q;
                            D_fsm_d = 5'ha;
                        end else begin
                            D_fsm_d = 5'h1d;
                        end
                    end
                end
            end
            5'ha: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_bullet_writer_pointer_q;
                M_ram_write_data = 2'h0;
                D_bullet_written_d = 1'h0;
                D_enemy_A_writer_pointer_d = enemy_A_y * COLUMN_DIMENSION + enemy_A_x;
                D_enemy_B_writer_pointer_d = enemy_B_y * COLUMN_DIMENSION + enemy_B_x;
                D_enemy_C_writer_pointer_d = enemy_C_y * COLUMN_DIMENSION + enemy_C_x;
                D_fsm_d = 5'hb;
            end
            5'h9: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_bullet_writer_pointer_q;
                M_ram_write_data = bullet_colour_out;
                D_bullet_written_d = 1'h1;
                D_bullet_last_addr_d = D_bullet_writer_pointer_q;
                D_fsm_d = 5'h1d;
            end
            5'h1d: begin
                M_ram_write_enable = 1'h0;
                M_ram_raddr = address;
                out_encoding = M_ram_read_data;
                debug_data = 1'h0;
                D_fsm_d = 5'h1d;
                if (D_update_flag_q) begin
                    D_update_flag_d = 1'h0;
                    D_fsm_d = 5'h0;
                end
                if (D_init_q) begin
                    D_init_d = 1'h0;
                    D_fsm_d = 5'hb;
                end
            end
        endcase
        debug_address_pointer = D_player_writer_pointer_q;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_writer_pointer_q <= 1'h0;
            D_fsm_q <= 5'h0;
            D_player_writer_pointer_q <= 1'h0;
            D_bullet_writer_pointer_q <= 1'h0;
            D_update_flag_q <= 1'h0;
            D_bullet_written_q <= 1'h0;
            D_bullet_last_addr_q <= 1'h0;
            D_init_q <= 1'h1;
            D_enemy_A_writer_pointer_q <= 1'h0;
            D_enemy_B_writer_pointer_q <= 1'h0;
            D_enemy_C_writer_pointer_q <= 1'h0;
        end else begin
            D_writer_pointer_q <= D_writer_pointer_d;
            D_fsm_q <= D_fsm_d;
            D_player_writer_pointer_q <= D_player_writer_pointer_d;
            D_bullet_writer_pointer_q <= D_bullet_writer_pointer_d;
            D_update_flag_q <= D_update_flag_d;
            D_bullet_written_q <= D_bullet_written_d;
            D_bullet_last_addr_q <= D_bullet_last_addr_d;
            D_init_q <= D_init_d;
            D_enemy_A_writer_pointer_q <= D_enemy_A_writer_pointer_d;
            D_enemy_B_writer_pointer_q <= D_enemy_B_writer_pointer_d;
            D_enemy_C_writer_pointer_q <= D_enemy_C_writer_pointer_d;
        end
    end
endmodule
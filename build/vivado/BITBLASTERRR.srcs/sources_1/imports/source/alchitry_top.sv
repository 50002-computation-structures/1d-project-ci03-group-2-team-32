/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire left_btn,
        input wire right_btn,
        input wire red_btn,
        input wire green_btn,
        input wire blue_btn,
        input wire start_btn,
        input wire external_reset_button,
        output reg data
    );
    logic rst;
    localparam CLK_FREQ = 24'h989680;
    localparam BULLET_SLOW_CLK_DIV = 5'h16;
    localparam FAST_CLOCK_DIV = 5'h15;
    localparam ENEMY_A_SLOW_CLK_DIV = 5'h15;
    localparam TIMER_SLOW_CLK_DIV = 5'h1a;
    localparam _MP_RISE_1778508077 = 1'h1;
    localparam _MP_FALL_1778508077 = 1'h0;
    logic M_edge_dt_btn_left_in;
    logic M_edge_dt_btn_left_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1778508077),
        .FALL(_MP_FALL_1778508077)
    ) edge_dt_btn_left (
        .clk(clk),
        .in(M_edge_dt_btn_left_in),
        .out(M_edge_dt_btn_left_out)
    );
    
    
    localparam _MP_RISE_1223784465 = 1'h1;
    localparam _MP_FALL_1223784465 = 1'h0;
    logic M_edge_dt_btn_right_in;
    logic M_edge_dt_btn_right_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1223784465),
        .FALL(_MP_FALL_1223784465)
    ) edge_dt_btn_right (
        .clk(clk),
        .in(M_edge_dt_btn_right_in),
        .out(M_edge_dt_btn_right_out)
    );
    
    
    localparam _MP_RISE_1228248062 = 1'h1;
    localparam _MP_FALL_1228248062 = 1'h0;
    logic M_edge_dt_btn_red_shoot_in;
    logic M_edge_dt_btn_red_shoot_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1228248062),
        .FALL(_MP_FALL_1228248062)
    ) edge_dt_btn_red_shoot (
        .clk(clk),
        .in(M_edge_dt_btn_red_shoot_in),
        .out(M_edge_dt_btn_red_shoot_out)
    );
    
    
    localparam _MP_RISE_1302028820 = 1'h1;
    localparam _MP_FALL_1302028820 = 1'h0;
    logic M_edge_dt_btn_green_shoot_in;
    logic M_edge_dt_btn_green_shoot_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1302028820),
        .FALL(_MP_FALL_1302028820)
    ) edge_dt_btn_green_shoot (
        .clk(clk),
        .in(M_edge_dt_btn_green_shoot_in),
        .out(M_edge_dt_btn_green_shoot_out)
    );
    
    
    localparam _MP_RISE_1788074503 = 1'h1;
    localparam _MP_FALL_1788074503 = 1'h0;
    logic M_edge_dt_btn_blue_shoot_in;
    logic M_edge_dt_btn_blue_shoot_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1788074503),
        .FALL(_MP_FALL_1788074503)
    ) edge_dt_btn_blue_shoot (
        .clk(clk),
        .in(M_edge_dt_btn_blue_shoot_in),
        .out(M_edge_dt_btn_blue_shoot_out)
    );
    
    
    localparam _MP_RISE_1080451091 = 1'h0;
    localparam _MP_FALL_1080451091 = 1'h1;
    logic M_edge_dt_btn_start_btn_in;
    logic M_edge_dt_btn_start_btn_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1080451091),
        .FALL(_MP_FALL_1080451091)
    ) edge_dt_btn_start_btn (
        .clk(clk),
        .in(M_edge_dt_btn_start_btn_in),
        .out(M_edge_dt_btn_start_btn_out)
    );
    
    
    localparam _MP_CLK_FREQ_1973809679 = 24'h989680;
    localparam _MP_MIN_DELAY_1973809679 = 5'h14;
    localparam _MP_NUM_SYNC_1973809679 = 2'h2;
    logic M_btn_cond_left_in;
    logic M_btn_cond_left_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1973809679),
        .MIN_DELAY(_MP_MIN_DELAY_1973809679),
        .NUM_SYNC(_MP_NUM_SYNC_1973809679)
    ) btn_cond_left (
        .clk(clk),
        .in(M_btn_cond_left_in),
        .out(M_btn_cond_left_out)
    );
    
    
    localparam _MP_CLK_FREQ_461339769 = 24'h989680;
    localparam _MP_MIN_DELAY_461339769 = 5'h14;
    localparam _MP_NUM_SYNC_461339769 = 2'h2;
    logic M_btn_cond_right_in;
    logic M_btn_cond_right_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_461339769),
        .MIN_DELAY(_MP_MIN_DELAY_461339769),
        .NUM_SYNC(_MP_NUM_SYNC_461339769)
    ) btn_cond_right (
        .clk(clk),
        .in(M_btn_cond_right_in),
        .out(M_btn_cond_right_out)
    );
    
    
    localparam _MP_CLK_FREQ_1410115143 = 24'h989680;
    localparam _MP_MIN_DELAY_1410115143 = 5'h14;
    localparam _MP_NUM_SYNC_1410115143 = 2'h2;
    logic M_btn_cond_red_shoot_in;
    logic M_btn_cond_red_shoot_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1410115143),
        .MIN_DELAY(_MP_MIN_DELAY_1410115143),
        .NUM_SYNC(_MP_NUM_SYNC_1410115143)
    ) btn_cond_red_shoot (
        .clk(clk),
        .in(M_btn_cond_red_shoot_in),
        .out(M_btn_cond_red_shoot_out)
    );
    
    
    localparam _MP_CLK_FREQ_1643420326 = 24'h989680;
    localparam _MP_MIN_DELAY_1643420326 = 5'h14;
    localparam _MP_NUM_SYNC_1643420326 = 2'h2;
    logic M_btn_cond_green_shoot_in;
    logic M_btn_cond_green_shoot_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1643420326),
        .MIN_DELAY(_MP_MIN_DELAY_1643420326),
        .NUM_SYNC(_MP_NUM_SYNC_1643420326)
    ) btn_cond_green_shoot (
        .clk(clk),
        .in(M_btn_cond_green_shoot_in),
        .out(M_btn_cond_green_shoot_out)
    );
    
    
    localparam _MP_CLK_FREQ_661882180 = 24'h989680;
    localparam _MP_MIN_DELAY_661882180 = 5'h14;
    localparam _MP_NUM_SYNC_661882180 = 2'h2;
    logic M_btn_cond_blue_shoot_in;
    logic M_btn_cond_blue_shoot_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_661882180),
        .MIN_DELAY(_MP_MIN_DELAY_661882180),
        .NUM_SYNC(_MP_NUM_SYNC_661882180)
    ) btn_cond_blue_shoot (
        .clk(clk),
        .in(M_btn_cond_blue_shoot_in),
        .out(M_btn_cond_blue_shoot_out)
    );
    
    
    localparam _MP_CLK_FREQ_1192212839 = 24'h989680;
    localparam _MP_MIN_DELAY_1192212839 = 5'h14;
    localparam _MP_NUM_SYNC_1192212839 = 2'h2;
    logic M_btn_cond_start_btn_in;
    logic M_btn_cond_start_btn_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1192212839),
        .MIN_DELAY(_MP_MIN_DELAY_1192212839),
        .NUM_SYNC(_MP_NUM_SYNC_1192212839)
    ) btn_cond_start_btn (
        .clk(clk),
        .in(M_btn_cond_start_btn_in),
        .out(M_btn_cond_start_btn_out)
    );
    
    
    localparam _MP_STAGES_1979715935 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_1979715935)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam _MP_STAGES_1397951246 = 3'h4;
    logic M_external_reset_cond_in;
    logic M_external_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_1397951246)
    ) external_reset_cond (
        .clk(clk),
        .in(M_external_reset_cond_in),
        .out(M_external_reset_cond_out)
    );
    
    
    localparam _MP_DIGITS_596748589 = 3'h4;
    localparam _MP_DIV_596748589 = 5'h10;
    logic [3:0][3:0] M_seg_values;
    logic [6:0] M_seg_seg;
    logic [3:0] M_seg_sel;
    
    multi_seven_seg #(
        .DIGITS(_MP_DIGITS_596748589),
        .DIV(_MP_DIV_596748589)
    ) seg (
        .clk(clk),
        .rst(rst),
        .values(M_seg_values),
        .seg(M_seg_seg),
        .sel(M_seg_sel)
    );
    
    
    localparam _MP_COLUMN_DIMENSION_903642038 = 16'h10;
    localparam _MP_ROW_DIMENSION_903642038 = 16'h10;
    localparam _MP_PIXEL_COUNT_903642038 = 16'h100;
    localparam _MP_BUFFER_SIZE_903642038 = 11'h400;
    localparam _MP_BULLET_SLOW_CLK_DIV_903642038 = 5'h16;
    localparam _MP_FAST_CLOCK_DIV_903642038 = 5'h15;
    localparam _MP_ENEMY_A_SLOW_CLK_DIV_903642038 = 5'h15;
    localparam _MP_TIMER_SLOW_CLK_DIV_903642038 = 5'h1a;
    logic M_game_data_path_redshoot_btn;
    logic M_game_data_path_greenshoot_btn;
    logic M_game_data_path_blueshoot_btn;
    logic M_game_data_path_left_btn;
    logic M_game_data_path_right_btn;
    logic M_game_data_path_start_btn;
    logic [7:0] M_game_data_path_led;
    logic [2:0][7:0] M_game_data_path_io_led;
    logic [7:0] M_game_data_path_io_segment;
    logic [3:0] M_game_data_path_io_select;
    logic M_game_data_path_bullet_slow_clk_out;
    logic M_game_data_path_timer_slow_clk_out;
    logic [31:0] M_game_data_path_score_seven_seg_out;
    logic [31:0] M_game_data_path_timer_seven_seg_out;
    logic M_game_data_path_data_out;
    
    game_data_path #(
        .COLUMN_DIMENSION(_MP_COLUMN_DIMENSION_903642038),
        .ROW_DIMENSION(_MP_ROW_DIMENSION_903642038),
        .PIXEL_COUNT(_MP_PIXEL_COUNT_903642038),
        .BUFFER_SIZE(_MP_BUFFER_SIZE_903642038),
        .BULLET_SLOW_CLK_DIV(_MP_BULLET_SLOW_CLK_DIV_903642038),
        .FAST_CLOCK_DIV(_MP_FAST_CLOCK_DIV_903642038),
        .ENEMY_A_SLOW_CLK_DIV(_MP_ENEMY_A_SLOW_CLK_DIV_903642038),
        .TIMER_SLOW_CLK_DIV(_MP_TIMER_SLOW_CLK_DIV_903642038)
    ) game_data_path (
        .clk(clk),
        .rst(rst),
        .redshoot_btn(M_game_data_path_redshoot_btn),
        .greenshoot_btn(M_game_data_path_greenshoot_btn),
        .blueshoot_btn(M_game_data_path_blueshoot_btn),
        .left_btn(M_game_data_path_left_btn),
        .right_btn(M_game_data_path_right_btn),
        .start_btn(M_game_data_path_start_btn),
        .led(M_game_data_path_led),
        .io_led(M_game_data_path_io_led),
        .io_segment(M_game_data_path_io_segment),
        .io_select(M_game_data_path_io_select),
        .bullet_slow_clk_out(M_game_data_path_bullet_slow_clk_out),
        .timer_slow_clk_out(M_game_data_path_timer_slow_clk_out),
        .score_seven_seg_out(M_game_data_path_score_seven_seg_out),
        .timer_seven_seg_out(M_game_data_path_timer_seven_seg_out),
        .data_out(M_game_data_path_data_out)
    );
    
    
    localparam _MP_DIGITS_1618469711 = 2'h2;
    localparam _MP_LEADING_ZEROS_1618469711 = 1'h0;
    logic [6:0] M_bin_to_dec_converte0_value;
    logic [1:0][3:0] M_bin_to_dec_converte0_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_1618469711),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_1618469711)
    ) bin_to_dec_converte0 (
        .value(M_bin_to_dec_converte0_value),
        .digits(M_bin_to_dec_converte0_digits)
    );
    
    
    localparam _MP_DIGITS_657798657 = 2'h2;
    localparam _MP_LEADING_ZEROS_657798657 = 1'h0;
    logic [6:0] M_bin_to_dec_converte1_value;
    logic [1:0][3:0] M_bin_to_dec_converte1_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_657798657),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_657798657)
    ) bin_to_dec_converte1 (
        .value(M_bin_to_dec_converte1_value),
        .digits(M_bin_to_dec_converte1_digits)
    );
    
    
    always @* begin
        M_reset_cond_in = ~rst_n;
        M_external_reset_cond_in = external_reset_button;
        rst = M_reset_cond_out | M_external_reset_cond_out;
        led = 8'h0;
        usb_tx = usb_rx;
        io_segment = 8'hf;
        io_select = 4'hf;
        led = 8'h0;
        data = 1'h0;
        io_led = {{8'h0, 8'h0, 8'h0}};
        M_bin_to_dec_converte0_value = M_game_data_path_timer_seven_seg_out[3'h6:1'h0];
        M_bin_to_dec_converte1_value = M_game_data_path_score_seven_seg_out[3'h6:1'h0];
        M_seg_values = {M_bin_to_dec_converte1_digits, M_bin_to_dec_converte0_digits};
        io_segment = M_seg_seg;
        io_select = ~M_seg_sel;
        M_btn_cond_start_btn_in = start_btn | io_button[2'h2];
        M_btn_cond_left_in = left_btn;
        M_btn_cond_right_in = right_btn;
        M_btn_cond_red_shoot_in = red_btn;
        M_btn_cond_green_shoot_in = green_btn;
        M_btn_cond_blue_shoot_in = blue_btn;
        M_edge_dt_btn_left_in = M_btn_cond_left_out;
        M_edge_dt_btn_right_in = M_btn_cond_right_out;
        M_edge_dt_btn_red_shoot_in = M_btn_cond_red_shoot_out;
        M_edge_dt_btn_green_shoot_in = M_btn_cond_green_shoot_out;
        M_edge_dt_btn_blue_shoot_in = M_btn_cond_blue_shoot_out;
        M_edge_dt_btn_start_btn_in = M_btn_cond_start_btn_out;
        M_game_data_path_left_btn = M_edge_dt_btn_left_out;
        M_game_data_path_right_btn = M_edge_dt_btn_right_out;
        M_game_data_path_redshoot_btn = M_edge_dt_btn_red_shoot_out;
        M_game_data_path_greenshoot_btn = M_edge_dt_btn_green_shoot_out;
        M_game_data_path_blueshoot_btn = M_edge_dt_btn_blue_shoot_out;
        M_game_data_path_start_btn = M_edge_dt_btn_start_btn_out;
        data = M_game_data_path_data_out;
        led = M_game_data_path_led;
        io_led = M_game_data_path_io_led;
    end
    
    
endmodule
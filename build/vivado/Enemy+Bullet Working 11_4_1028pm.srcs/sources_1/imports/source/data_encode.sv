/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module data_encode #(
        parameter SIZE = 6'h20
    ) (
        input wire [(SIZE)-1:0] a,
        input wire [(SIZE)-1:0] b,
        output reg [(SIZE)-1:0] out
    );
    logic [31:0] M_shifter_a;
    logic [4:0] M_shifter_b;
    logic M_shifter_pad;
    logic [31:0] M_shifter_shift;
    
    shifter shifter (
        .a(M_shifter_a),
        .b(M_shifter_b),
        .pad(M_shifter_pad),
        .shift(M_shifter_shift)
    );
    
    
    localparam _MP_SIZE_205666227 = 6'h20;
    logic [31:0] M_adder_a;
    logic [31:0] M_adder_b;
    logic [5:0] M_adder_alufn_signal;
    logic [31:0] M_adder_out;
    logic M_adder_z;
    logic M_adder_v;
    logic M_adder_n;
    
    adder #(
        .SIZE(_MP_SIZE_205666227)
    ) adder (
        .a(M_adder_a),
        .b(M_adder_b),
        .alufn_signal(M_adder_alufn_signal),
        .out(M_adder_out),
        .z(M_adder_z),
        .v(M_adder_v),
        .n(M_adder_n)
    );
    
    
    always @* begin
        M_shifter_a = a;
        M_shifter_b = 4'h8;
        M_shifter_pad = 1'h0;
        M_adder_a = M_shifter_shift;
        M_adder_b = b;
        M_adder_alufn_signal = 6'h0;
        out = M_adder_out;
    end
    
    
endmodule
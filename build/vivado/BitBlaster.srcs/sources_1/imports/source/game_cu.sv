/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module game_cu #(
        parameter COLUMN_DIMENSION = 16'h10,
        parameter ROW_DIMENSION = 16'h10,
        parameter PIXEL_COUNT = 16'h100,
        parameter BUFFER_SIZE = 11'h400
    ) (
        input wire clk,
        input wire rst,
        input wire [31:0] regfile_rd2,
        input wire bullet_slow_clk_out,
        input wire left_btn,
        input wire right_btn,
        input wire shoot_btn,
        output reg [5:0] alufn_signal,
        output reg [2:0] asel,
        output reg [2:0] bsel,
        output reg [1:0] wdsel,
        output reg [3:0] regfile_wa,
        output reg [3:0] regfile_ra1,
        output reg [3:0] regfile_ra2,
        output reg regfile_we,
        output reg [3:0] debug
    );
    localparam E_GameStates_IDLE = 4'h0;
    localparam E_GameStates_CHECK_RIGHT_BOUND = 4'h1;
    localparam E_GameStates_CHECK_LEFT_BOUND = 4'h2;
    localparam E_GameStates_MOVE_RIGHT = 4'h3;
    localparam E_GameStates_MOVE_LEFT = 4'h4;
    localparam E_GameStates_TRIGGER_UPDATE = 4'h5;
    localparam E_GameStates_BULLET_ACTIVE = 4'h6;
    localparam E_GameStates_BULLET_X_POS = 4'h7;
    localparam E_GameStates_CHECK_BULLET_BOUNDARY = 4'h8;
    localparam E_GameStates_BULLET_MOVE = 4'h9;
    localparam E_GameStates_BULLET_INACTIVE = 4'ha;
    localparam _MP_RISE_1804299113 = 1'h1;
    localparam _MP_FALL_1804299113 = 1'h0;
    logic M_bullet_slow_clk_edge_in;
    logic M_bullet_slow_clk_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1804299113),
        .FALL(_MP_FALL_1804299113)
    ) bullet_slow_clk_edge (
        .clk(clk),
        .in(M_bullet_slow_clk_edge_in),
        .out(M_bullet_slow_clk_edge_out)
    );
    
    
    logic [3:0] D_game_fsm_d, D_game_fsm_q = 4'h0;
    always @* begin
        D_game_fsm_d = D_game_fsm_q;
        
        M_bullet_slow_clk_edge_in = bullet_slow_clk_out;
        alufn_signal = 1'h0;
        asel = 1'h0;
        bsel = 1'h0;
        regfile_we = 1'h0;
        regfile_wa = 3'h6;
        regfile_ra1 = 1'h0;
        regfile_ra2 = 1'h0;
        wdsel = 1'h0;
        debug = 4'h0;
        if (rst) begin
            D_game_fsm_d = 4'h0;
        end else begin
            
            case (D_game_fsm_q)
                4'h0: begin
                    if (right_btn) begin
                        D_game_fsm_d = 4'h1;
                    end else begin
                        if (left_btn) begin
                            D_game_fsm_d = 4'h2;
                        end else begin
                            if (shoot_btn) begin
                                regfile_ra2 = 4'hd;
                                if (~regfile_rd2[1'h0]) begin
                                    D_game_fsm_d = 4'h6;
                                end
                            end else begin
                                regfile_ra2 = 4'hd;
                                if (regfile_rd2[1'h0] & M_bullet_slow_clk_edge_out) begin
                                    D_game_fsm_d = 4'h8;
                                end else begin
                                    D_game_fsm_d = 4'h0;
                                end
                            end
                        end
                    end
                end
                4'h1: begin
                    alufn_signal = 6'h35;
                    regfile_ra1 = 1'h0;
                    bsel = 3'h2;
                    asel = 3'h0;
                    regfile_we = 1'h1;
                    regfile_wa = 4'hb;
                    D_game_fsm_d = 4'h3;
                end
                4'h2: begin
                    alufn_signal = 6'h35;
                    regfile_ra1 = 1'h0;
                    bsel = 3'h3;
                    asel = 3'h0;
                    regfile_we = 1'h1;
                    regfile_wa = 4'hb;
                    D_game_fsm_d = 4'h4;
                end
                4'h3: begin
                    regfile_ra2 = 4'hb;
                    if (regfile_rd2[1'h0]) begin
                        alufn_signal = 6'h0;
                        regfile_ra1 = 1'h0;
                        bsel = 3'h1;
                        asel = 3'h0;
                        regfile_we = 1'h1;
                        regfile_wa = 1'h0;
                        D_game_fsm_d = 4'h5;
                    end else begin
                        D_game_fsm_d = 4'h0;
                    end
                end
                4'h4: begin
                    regfile_ra2 = 4'hb;
                    if (~regfile_rd2[1'h0]) begin
                        alufn_signal = 6'h1;
                        regfile_ra1 = 1'h0;
                        bsel = 3'h1;
                        asel = 3'h0;
                        regfile_we = 1'h1;
                        regfile_wa = 1'h0;
                        D_game_fsm_d = 4'h5;
                    end else begin
                        D_game_fsm_d = 4'h0;
                    end
                end
                4'h5: begin
                    alufn_signal = 6'h2;
                    bsel = 3'h1;
                    asel = 3'h1;
                    regfile_we = 1'h1;
                    regfile_wa = 4'hf;
                    D_game_fsm_d = 4'h0;
                end
                4'h6: begin
                    alufn_signal = 6'h0;
                    bsel = 3'h1;
                    asel = 3'h1;
                    regfile_we = 1'h1;
                    regfile_wa = 4'hd;
                    D_game_fsm_d = 4'h7;
                end
                4'h7: begin
                    alufn_signal = 6'h2;
                    regfile_ra1 = 1'h0;
                    bsel = 3'h1;
                    asel = 3'h0;
                    regfile_we = 1'h1;
                    regfile_wa = 3'h7;
                    D_game_fsm_d = 4'h0;
                end
                4'h8: begin
                    alufn_signal = 6'h35;
                    regfile_ra1 = 4'h8;
                    bsel = 3'h4;
                    asel = 3'h0;
                    regfile_we = 1'h1;
                    regfile_wa = 4'hb;
                    D_game_fsm_d = 4'h9;
                end
                4'h9: begin
                    regfile_ra2 = 4'hb;
                    if (~regfile_rd2[1'h0]) begin
                        alufn_signal = 6'h1;
                        regfile_ra1 = 4'h8;
                        bsel = 3'h1;
                        asel = 3'h0;
                        regfile_we = 1'h1;
                        regfile_wa = 4'h8;
                        D_game_fsm_d = 4'h0;
                    end else begin
                        alufn_signal = 6'h2;
                        bsel = 3'h1;
                        asel = 3'h2;
                        regfile_we = 1'h1;
                        regfile_wa = 4'h8;
                        D_game_fsm_d = 4'ha;
                    end
                end
                4'ha: begin
                    alufn_signal = 6'h2;
                    bsel = 3'h1;
                    asel = 3'h1;
                    regfile_we = 1'h1;
                    regfile_wa = 4'hd;
                    D_game_fsm_d = 4'h0;
                end
            endcase
        end
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_game_fsm_q <= 4'h0;
        end else begin
            D_game_fsm_q <= D_game_fsm_d;
        end
    end
endmodule
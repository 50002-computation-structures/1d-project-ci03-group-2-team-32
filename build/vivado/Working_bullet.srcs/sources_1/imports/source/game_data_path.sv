/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module game_data_path #(
        parameter COLUMN_DIMENSION = 16'h10,
        parameter ROW_DIMENSION = 16'h10,
        parameter PIXEL_COUNT = 16'h100,
        parameter BUFFER_SIZE = 11'h400,
        parameter BULLET_SLOW_CLK_DIV = 5'h18
    ) (
        input wire left_btn,
        input wire right_btn,
        input wire red_btn,
        input wire blue_btn,
        input wire green_btn,
        input wire clk,
        input wire rst,
        output reg [31:0] player_pos_x_out,
        output reg [31:0] player_pos_y_out,
        output reg [31:0] player_health_out,
        output reg [31:0] timer_out,
        output reg [31:0] score_out,
        output reg [31:0] sprite_out,
        output reg [31:0] bullet_color_out,
        output reg [31:0] player_bullet_x_out,
        output reg [31:0] player_bullet_y_out,
        output reg [31:0] enemy_encoding_out,
        output reg [31:0] stage_counter_out,
        output reg [7:0] led,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        output reg bullet_slow_clk_out,
        output reg data_out
    );
    logic [31:0] input_alu_a;
    logic [31:0] input_alu_b;
    logic [31:0] M_game_alu_a;
    logic [31:0] M_game_alu_b;
    logic [5:0] M_game_alu_alufn_signal;
    logic [31:0] M_game_alu_out;
    logic M_game_alu_z;
    logic M_game_alu_v;
    logic M_game_alu_n;
    
    alu game_alu (
        .a(M_game_alu_a),
        .b(M_game_alu_b),
        .alufn_signal(M_game_alu_alufn_signal),
        .out(M_game_alu_out),
        .z(M_game_alu_z),
        .v(M_game_alu_v),
        .n(M_game_alu_n)
    );
    
    
    localparam _MP_SIZE_516860607 = 1'h1;
    localparam _MP_DIV_516860607 = BULLET_SLOW_CLK_DIV;
    localparam _MP_TOP_516860607 = 1'h0;
    localparam _MP_UP_516860607 = 1'h1;
    logic [0:0] M_bullet_slow_clk_value;
    
    counter #(
        .SIZE(_MP_SIZE_516860607),
        .DIV(_MP_DIV_516860607),
        .TOP(_MP_TOP_516860607),
        .UP(_MP_UP_516860607)
    ) bullet_slow_clk (
        .rst(rst),
        .clk(clk),
        .value(M_bullet_slow_clk_value)
    );
    
    
    localparam _MP_COLUMN_DIMENSION_43785855 = 16'h10;
    localparam _MP_ROW_DIMENSION_43785855 = 16'h10;
    localparam _MP_PIXEL_COUNT_43785855 = 16'h100;
    localparam _MP_BUFFER_SIZE_43785855 = 11'h400;
    logic [31:0] M_game_cu_regfile_rd2;
    logic [5:0] M_game_cu_alufn_signal;
    logic [2:0] M_game_cu_asel;
    logic [2:0] M_game_cu_bsel;
    logic [1:0] M_game_cu_wdsel;
    logic [3:0] M_game_cu_regfile_wa;
    logic [3:0] M_game_cu_regfile_ra1;
    logic [3:0] M_game_cu_regfile_ra2;
    logic M_game_cu_regfile_we;
    logic [3:0] M_game_cu_debug;
    
    game_cu #(
        .COLUMN_DIMENSION(_MP_COLUMN_DIMENSION_43785855),
        .ROW_DIMENSION(_MP_ROW_DIMENSION_43785855),
        .PIXEL_COUNT(_MP_PIXEL_COUNT_43785855),
        .BUFFER_SIZE(_MP_BUFFER_SIZE_43785855)
    ) game_cu (
        .left_btn(left_btn),
        .right_btn(right_btn),
        .red_btn(red_btn),
        .green_btn(green_btn),
        .blue_btn(blue_btn),
        .bullet_slow_clk_out(M_bullet_slow_clk_value),
        .rst(rst),
        .clk(clk),
        .regfile_rd2(M_game_cu_regfile_rd2),
        .alufn_signal(M_game_cu_alufn_signal),
        .asel(M_game_cu_asel),
        .bsel(M_game_cu_bsel),
        .wdsel(M_game_cu_wdsel),
        .regfile_wa(M_game_cu_regfile_wa),
        .regfile_ra1(M_game_cu_regfile_ra1),
        .regfile_ra2(M_game_cu_regfile_ra2),
        .regfile_we(M_game_cu_regfile_we),
        .debug(M_game_cu_debug)
    );
    
    
    localparam _MP_COLUMN_DIMENSION_863312769 = 16'h10;
    localparam _MP_ROW_DIMENSION_863312769 = 16'h10;
    localparam _MP_PIXEL_COUNT_863312769 = 16'h100;
    localparam _MP_BUFFER_SIZE_863312769 = 11'h400;
    logic [31:0] M_game_regfile_regfile_data;
    logic [31:0] M_game_regfile_rd1;
    logic [31:0] M_game_regfile_rd2;
    logic [31:0] M_game_regfile_player_pos_x_out;
    logic [31:0] M_game_regfile_player_pos_y_out;
    logic [31:0] M_game_regfile_player_health_out;
    logic [31:0] M_game_regfile_timer_out;
    logic [31:0] M_game_regfile_score_out;
    logic [31:0] M_game_regfile_sprite_out;
    logic [31:0] M_game_regfile_bullet_color_out;
    logic [31:0] M_game_regfile_player_bullet_x_out;
    logic [31:0] M_game_regfile_player_bullet_y_out;
    logic [31:0] M_game_regfile_enemy_encoding_out;
    logic [31:0] M_game_regfile_stage_counter_out;
    logic [31:0] M_game_regfile_check_boundary_out;
    logic [31:0] M_game_regfile_bullet_active_out;
    logic [7:0] M_game_regfile_led;
    logic [2:0][7:0] M_game_regfile_io_led;
    logic [7:0] M_game_regfile_io_segment;
    logic [3:0] M_game_regfile_io_select;
    
    game_regfile #(
        .COLUMN_DIMENSION(_MP_COLUMN_DIMENSION_863312769),
        .ROW_DIMENSION(_MP_ROW_DIMENSION_863312769),
        .PIXEL_COUNT(_MP_PIXEL_COUNT_863312769),
        .BUFFER_SIZE(_MP_BUFFER_SIZE_863312769)
    ) game_regfile (
        .we(M_game_cu_regfile_we),
        .wa(M_game_cu_regfile_wa),
        .ra1(M_game_cu_regfile_ra1),
        .ra2(M_game_cu_regfile_ra2),
        .rst(rst),
        .clk(clk),
        .regfile_data(M_game_regfile_regfile_data),
        .rd1(M_game_regfile_rd1),
        .rd2(M_game_regfile_rd2),
        .player_pos_x_out(M_game_regfile_player_pos_x_out),
        .player_pos_y_out(M_game_regfile_player_pos_y_out),
        .player_health_out(M_game_regfile_player_health_out),
        .timer_out(M_game_regfile_timer_out),
        .score_out(M_game_regfile_score_out),
        .sprite_out(M_game_regfile_sprite_out),
        .bullet_color_out(M_game_regfile_bullet_color_out),
        .player_bullet_x_out(M_game_regfile_player_bullet_x_out),
        .player_bullet_y_out(M_game_regfile_player_bullet_y_out),
        .enemy_encoding_out(M_game_regfile_enemy_encoding_out),
        .stage_counter_out(M_game_regfile_stage_counter_out),
        .check_boundary_out(M_game_regfile_check_boundary_out),
        .bullet_active_out(M_game_regfile_bullet_active_out),
        .led(M_game_regfile_led),
        .io_led(M_game_regfile_io_led),
        .io_segment(M_game_regfile_io_segment),
        .io_select(M_game_regfile_io_select)
    );
    
    
    localparam _MP_COLUMN_DIMENSION_1998983958 = 16'h10;
    localparam _MP_ROW_DIMENSION_1998983958 = 16'h10;
    localparam _MP_PIXEL_COUNT_1998983958 = 16'h100;
    localparam _MP_BUFFER_SIZE_1998983958 = 11'h400;
    logic [7:0] M_ram_mode_led;
    logic [2:0][7:0] M_ram_mode_io_led;
    logic [7:0] M_ram_mode_io_segment;
    logic [3:0] M_ram_mode_io_select;
    logic M_ram_mode_data;
    
    ram_mode #(
        .COLUMN_DIMENSION(_MP_COLUMN_DIMENSION_1998983958),
        .ROW_DIMENSION(_MP_ROW_DIMENSION_1998983958),
        .PIXEL_COUNT(_MP_PIXEL_COUNT_1998983958),
        .BUFFER_SIZE(_MP_BUFFER_SIZE_1998983958)
    ) ram_mode (
        .left_btn(left_btn),
        .right_btn(right_btn),
        .red_btn(red_btn),
        .green_btn(green_btn),
        .blue_btn(blue_btn),
        .player_pos_x_out(M_game_regfile_player_pos_x_out),
        .player_pos_y_out(M_game_regfile_player_pos_y_out),
        .bullet_color_out(M_game_regfile_bullet_color_out),
        .player_bullet_x_out(M_game_regfile_player_bullet_x_out),
        .player_bullet_y_out(M_game_regfile_player_bullet_y_out),
        .bullet_active_out(M_game_regfile_bullet_active_out),
        .bullet_slow_clk_out(M_bullet_slow_clk_value),
        .check_boundary_out(M_game_regfile_check_boundary_out),
        .rst(rst),
        .clk(clk),
        .led(M_ram_mode_led),
        .io_led(M_ram_mode_io_led),
        .io_segment(M_ram_mode_io_segment),
        .io_select(M_ram_mode_io_select),
        .data(M_ram_mode_data)
    );
    
    
    always @* begin
        M_game_cu_regfile_rd2 = M_game_regfile_rd2;
        data_out = M_ram_mode_data;
        io_segment = 8'hff;
        io_select = 4'hf;
        led = 8'h0;
        io_led[1'h0] = M_ram_mode_io_led[1'h0];
        io_led[1'h1] = M_ram_mode_io_led[1'h1];
        io_led[2'h2] = M_ram_mode_io_led[2'h2];
        led = M_ram_mode_led;
        
        case (M_game_cu_asel)
            3'h0: begin
                input_alu_a = M_game_regfile_rd1;
            end
            3'h1: begin
                input_alu_a = 1'h0;
            end
            3'h2: begin
                input_alu_a = 4'hd;
            end
            3'h3: begin
                input_alu_a = 4'hb;
            end
            3'h4: begin
                input_alu_a = 4'ha;
            end
            3'h5: begin
                input_alu_a = 1'h1;
            end
            default: begin
                input_alu_a = 1'h0;
            end
        endcase
        
        case (M_game_cu_bsel)
            3'h0: begin
                input_alu_b = M_game_regfile_rd2;
            end
            3'h1: begin
                input_alu_b = 1'h1;
            end
            3'h2: begin
                input_alu_b = 4'he;
            end
            3'h3: begin
                input_alu_b = 2'h2;
            end
            3'h4: begin
                input_alu_b = 1'h0;
            end
            default: begin
                input_alu_b = 1'h0;
            end
        endcase
        M_game_alu_a = input_alu_a;
        M_game_alu_b = input_alu_b;
        M_game_alu_alufn_signal = M_game_cu_alufn_signal;
        
        case (M_game_cu_wdsel)
            2'h0: begin
                M_game_regfile_regfile_data = M_game_alu_out;
            end
            2'h3: begin
                M_game_regfile_regfile_data = 1'h0;
            end
            default: begin
                M_game_regfile_regfile_data = M_game_alu_out;
            end
        endcase
        player_pos_x_out = M_game_regfile_player_pos_x_out;
        player_pos_y_out = M_game_regfile_player_pos_y_out;
        player_health_out = M_game_regfile_player_health_out;
        timer_out = M_game_regfile_timer_out;
        score_out = M_game_regfile_score_out;
        sprite_out = M_game_regfile_sprite_out;
        bullet_color_out = M_game_regfile_bullet_color_out;
        player_bullet_x_out = M_game_regfile_player_bullet_x_out;
        player_bullet_y_out = M_game_regfile_player_bullet_y_out;
        enemy_encoding_out = M_game_regfile_enemy_encoding_out;
        stage_counter_out = M_game_regfile_stage_counter_out;
        bullet_slow_clk_out = M_bullet_slow_clk_value;
    end
    
    
endmodule
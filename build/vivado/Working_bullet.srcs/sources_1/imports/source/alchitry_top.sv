/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip,
        input wire left_btn,
        input wire right_btn,
        input wire red_btn,
        input wire green_btn,
        input wire blue_btn,
        output reg data
    );
    logic rst;
    localparam CLK_FREQ = 24'h989680;
    localparam BULLET_SLOW_CLK_DIV = 5'h16;
    localparam _MP_RISE_1638957443 = 1'h0;
    localparam _MP_FALL_1638957443 = 1'h1;
    logic M_edge_dt_btn_left_in;
    logic M_edge_dt_btn_left_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1638957443),
        .FALL(_MP_FALL_1638957443)
    ) edge_dt_btn_left (
        .clk(clk),
        .in(M_edge_dt_btn_left_in),
        .out(M_edge_dt_btn_left_out)
    );
    
    
    localparam _MP_RISE_991037239 = 1'h0;
    localparam _MP_FALL_991037239 = 1'h1;
    logic M_edge_dt_btn_right_in;
    logic M_edge_dt_btn_right_out;
    
    edge_detector #(
        .RISE(_MP_RISE_991037239),
        .FALL(_MP_FALL_991037239)
    ) edge_dt_btn_right (
        .clk(clk),
        .in(M_edge_dt_btn_right_in),
        .out(M_edge_dt_btn_right_out)
    );
    
    
    localparam _MP_RISE_435020731 = 1'h0;
    localparam _MP_FALL_435020731 = 1'h1;
    logic M_edge_dt_btn_red_shoot_in;
    logic M_edge_dt_btn_red_shoot_out;
    
    edge_detector #(
        .RISE(_MP_RISE_435020731),
        .FALL(_MP_FALL_435020731)
    ) edge_dt_btn_red_shoot (
        .clk(clk),
        .in(M_edge_dt_btn_red_shoot_in),
        .out(M_edge_dt_btn_red_shoot_out)
    );
    
    
    localparam _MP_RISE_140899932 = 1'h0;
    localparam _MP_FALL_140899932 = 1'h1;
    logic M_edge_dt_btn_green_shoot_in;
    logic M_edge_dt_btn_green_shoot_out;
    
    edge_detector #(
        .RISE(_MP_RISE_140899932),
        .FALL(_MP_FALL_140899932)
    ) edge_dt_btn_green_shoot (
        .clk(clk),
        .in(M_edge_dt_btn_green_shoot_in),
        .out(M_edge_dt_btn_green_shoot_out)
    );
    
    
    localparam _MP_RISE_253419753 = 1'h0;
    localparam _MP_FALL_253419753 = 1'h1;
    logic M_edge_dt_btn_blue_shoot_in;
    logic M_edge_dt_btn_blue_shoot_out;
    
    edge_detector #(
        .RISE(_MP_RISE_253419753),
        .FALL(_MP_FALL_253419753)
    ) edge_dt_btn_blue_shoot (
        .clk(clk),
        .in(M_edge_dt_btn_blue_shoot_in),
        .out(M_edge_dt_btn_blue_shoot_out)
    );
    
    
    localparam _MP_CLK_FREQ_450480544 = 24'h989680;
    localparam _MP_MIN_DELAY_450480544 = 5'h14;
    localparam _MP_NUM_SYNC_450480544 = 2'h2;
    logic M_btn_cond_left_in;
    logic M_btn_cond_left_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_450480544),
        .MIN_DELAY(_MP_MIN_DELAY_450480544),
        .NUM_SYNC(_MP_NUM_SYNC_450480544)
    ) btn_cond_left (
        .clk(clk),
        .in(M_btn_cond_left_in),
        .out(M_btn_cond_left_out)
    );
    
    
    localparam _MP_CLK_FREQ_186853099 = 24'h989680;
    localparam _MP_MIN_DELAY_186853099 = 5'h14;
    localparam _MP_NUM_SYNC_186853099 = 2'h2;
    logic M_btn_cond_right_in;
    logic M_btn_cond_right_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_186853099),
        .MIN_DELAY(_MP_MIN_DELAY_186853099),
        .NUM_SYNC(_MP_NUM_SYNC_186853099)
    ) btn_cond_right (
        .clk(clk),
        .in(M_btn_cond_right_in),
        .out(M_btn_cond_right_out)
    );
    
    
    localparam _MP_CLK_FREQ_356562165 = 24'h989680;
    localparam _MP_MIN_DELAY_356562165 = 5'h14;
    localparam _MP_NUM_SYNC_356562165 = 2'h2;
    logic M_btn_cond_red_shoot_in;
    logic M_btn_cond_red_shoot_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_356562165),
        .MIN_DELAY(_MP_MIN_DELAY_356562165),
        .NUM_SYNC(_MP_NUM_SYNC_356562165)
    ) btn_cond_red_shoot (
        .clk(clk),
        .in(M_btn_cond_red_shoot_in),
        .out(M_btn_cond_red_shoot_out)
    );
    
    
    localparam _MP_CLK_FREQ_1929128597 = 24'h989680;
    localparam _MP_MIN_DELAY_1929128597 = 5'h14;
    localparam _MP_NUM_SYNC_1929128597 = 2'h2;
    logic M_btn_cond_green_shoot_in;
    logic M_btn_cond_green_shoot_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1929128597),
        .MIN_DELAY(_MP_MIN_DELAY_1929128597),
        .NUM_SYNC(_MP_NUM_SYNC_1929128597)
    ) btn_cond_green_shoot (
        .clk(clk),
        .in(M_btn_cond_green_shoot_in),
        .out(M_btn_cond_green_shoot_out)
    );
    
    
    localparam _MP_CLK_FREQ_1136875397 = 24'h989680;
    localparam _MP_MIN_DELAY_1136875397 = 5'h14;
    localparam _MP_NUM_SYNC_1136875397 = 2'h2;
    logic M_btn_cond_blue_shoot_in;
    logic M_btn_cond_blue_shoot_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1136875397),
        .MIN_DELAY(_MP_MIN_DELAY_1136875397),
        .NUM_SYNC(_MP_NUM_SYNC_1136875397)
    ) btn_cond_blue_shoot (
        .clk(clk),
        .in(M_btn_cond_blue_shoot_in),
        .out(M_btn_cond_blue_shoot_out)
    );
    
    
    localparam _MP_STAGES_1363486056 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_1363486056)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam _MP_COLUMN_DIMENSION_611967769 = 16'h10;
    localparam _MP_ROW_DIMENSION_611967769 = 16'h10;
    localparam _MP_PIXEL_COUNT_611967769 = 16'h100;
    localparam _MP_BUFFER_SIZE_611967769 = 11'h400;
    localparam _MP_BULLET_SLOW_CLK_DIV_611967769 = 5'h16;
    logic M_game_data_path_left_btn;
    logic M_game_data_path_right_btn;
    logic M_game_data_path_red_btn;
    logic M_game_data_path_blue_btn;
    logic M_game_data_path_green_btn;
    logic [31:0] M_game_data_path_player_pos_x_out;
    logic [31:0] M_game_data_path_player_pos_y_out;
    logic [31:0] M_game_data_path_player_health_out;
    logic [31:0] M_game_data_path_timer_out;
    logic [31:0] M_game_data_path_score_out;
    logic [31:0] M_game_data_path_sprite_out;
    logic [31:0] M_game_data_path_bullet_color_out;
    logic [31:0] M_game_data_path_player_bullet_x_out;
    logic [31:0] M_game_data_path_player_bullet_y_out;
    logic [31:0] M_game_data_path_enemy_encoding_out;
    logic [31:0] M_game_data_path_stage_counter_out;
    logic [7:0] M_game_data_path_led;
    logic [2:0][7:0] M_game_data_path_io_led;
    logic [7:0] M_game_data_path_io_segment;
    logic [3:0] M_game_data_path_io_select;
    logic M_game_data_path_bullet_slow_clk_out;
    logic M_game_data_path_data_out;
    
    game_data_path #(
        .COLUMN_DIMENSION(_MP_COLUMN_DIMENSION_611967769),
        .ROW_DIMENSION(_MP_ROW_DIMENSION_611967769),
        .PIXEL_COUNT(_MP_PIXEL_COUNT_611967769),
        .BUFFER_SIZE(_MP_BUFFER_SIZE_611967769),
        .BULLET_SLOW_CLK_DIV(_MP_BULLET_SLOW_CLK_DIV_611967769)
    ) game_data_path (
        .clk(clk),
        .rst(rst),
        .left_btn(M_game_data_path_left_btn),
        .right_btn(M_game_data_path_right_btn),
        .red_btn(M_game_data_path_red_btn),
        .blue_btn(M_game_data_path_blue_btn),
        .green_btn(M_game_data_path_green_btn),
        .player_pos_x_out(M_game_data_path_player_pos_x_out),
        .player_pos_y_out(M_game_data_path_player_pos_y_out),
        .player_health_out(M_game_data_path_player_health_out),
        .timer_out(M_game_data_path_timer_out),
        .score_out(M_game_data_path_score_out),
        .sprite_out(M_game_data_path_sprite_out),
        .bullet_color_out(M_game_data_path_bullet_color_out),
        .player_bullet_x_out(M_game_data_path_player_bullet_x_out),
        .player_bullet_y_out(M_game_data_path_player_bullet_y_out),
        .enemy_encoding_out(M_game_data_path_enemy_encoding_out),
        .stage_counter_out(M_game_data_path_stage_counter_out),
        .led(M_game_data_path_led),
        .io_led(M_game_data_path_io_led),
        .io_segment(M_game_data_path_io_segment),
        .io_select(M_game_data_path_io_select),
        .bullet_slow_clk_out(M_game_data_path_bullet_slow_clk_out),
        .data_out(M_game_data_path_data_out)
    );
    
    
    always @* begin
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        led = 8'h0;
        usb_tx = usb_rx;
        io_segment = 8'hf;
        io_select = 4'hf;
        led = 8'h0;
        data = 1'h0;
        io_led = {{8'h0, 8'h0, 8'h0}};
        M_btn_cond_left_in = left_btn;
        M_btn_cond_right_in = right_btn;
        M_btn_cond_red_shoot_in = red_btn;
        M_btn_cond_green_shoot_in = green_btn;
        M_btn_cond_blue_shoot_in = blue_btn;
        M_edge_dt_btn_left_in = M_btn_cond_left_out;
        M_edge_dt_btn_right_in = M_btn_cond_right_out;
        M_edge_dt_btn_red_shoot_in = M_btn_cond_red_shoot_out;
        M_edge_dt_btn_blue_shoot_in = M_btn_cond_blue_shoot_out;
        M_edge_dt_btn_green_shoot_in = M_btn_cond_green_shoot_out;
        M_game_data_path_left_btn = M_edge_dt_btn_left_out;
        M_game_data_path_right_btn = M_edge_dt_btn_right_out;
        M_game_data_path_red_btn = M_edge_dt_btn_red_shoot_out;
        M_game_data_path_green_btn = M_edge_dt_btn_green_shoot_out;
        M_game_data_path_blue_btn = M_edge_dt_btn_blue_shoot_out;
        io_segment = M_game_data_path_io_segment;
        io_select = M_game_data_path_io_select;
        data = M_game_data_path_data_out;
        led = M_game_data_path_led;
        io_led = M_game_data_path_io_led;
        io_led[1'h0][1'h0] = left_btn;
        io_led[1'h0][1'h1] = ~left_btn;
        io_led[1'h0][2'h2] = M_btn_cond_left_out;
        io_led[1'h0][2'h3] = M_edge_dt_btn_left_out;
        io_led[1'h0][3'h4] = right_btn;
        io_led[1'h0][3'h5] = ~right_btn;
        io_led[1'h0][3'h6] = M_btn_cond_right_out;
        io_led[1'h0][3'h7] = M_edge_dt_btn_right_out;
        io_led[2'h2] = M_game_data_path_player_pos_x_out;
    end
    
    
endmodule
/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module game_regfile #(
        parameter COLUMN_DIMENSION = 16'h10,
        parameter ROW_DIMENSION = 16'h10,
        parameter PIXEL_COUNT = 16'h100,
        parameter BUFFER_SIZE = 11'h400
    ) (
        input wire clk,
        input wire rst,
        input wire [3:0] wa,
        input wire we,
        input wire [31:0] regfile_data,
        input wire [3:0] ra1,
        input wire [3:0] ra2,
        output reg [31:0] rd1,
        output reg [31:0] rd2,
        output reg [31:0] player_pos_x_out,
        output reg [31:0] player_pos_y_out,
        output reg [31:0] player_health_out,
        output reg [31:0] timer_out,
        output reg [31:0] score_out,
        output reg [31:0] sprite_out,
        output reg [31:0] bullet_color_out,
        output reg [31:0] player_bullet_x_out,
        output reg [31:0] player_bullet_y_out,
        output reg [31:0] enemy_encoding_out,
        output reg [31:0] stage_counter_out,
        output reg [31:0] check_boundary_out,
        output reg [31:0] bullet_active_out,
        output reg [7:0] led,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select
    );
    localparam ENCODING_AMOUNT = 3'h4;
    localparam logic [3:0][23:0] LEDCOLOR = {{24'hf0f0f, 24'h30000, 24'h300, 24'h0}};
    logic [31:0] D_player_health_d, D_player_health_q = 1'h0;
    logic [31:0] D_timer_d, D_timer_q = 1'h0;
    logic [31:0] D_score_d, D_score_q = 1'h0;
    logic [31:0] D_sprite_d, D_sprite_q = 1'h0;
    logic [31:0] D_bullet_color_d, D_bullet_color_q = 1'h0;
    logic [31:0] D_enemy_encoding_d, D_enemy_encoding_q = 1'h0;
    logic [31:0] D_stage_counter_d, D_stage_counter_q = 1'h0;
    logic [31:0] D_check_boundary_d, D_check_boundary_q = 1'h0;
    logic [31:0] D_cooldown_d, D_cooldown_q = 1'h0;
    logic [31:0] D_bullet_timer_d, D_bullet_timer_q = 1'h0;
    logic [31:0] D_bullet_active_d, D_bullet_active_q = 1'h0;
    logic [31:0] D_temp_reg_d, D_temp_reg_q = 1'h0;
    logic [($clog2(COLUMN_DIMENSION))-1:0] D_player_x_pos_d, D_player_x_pos_q = 3'h7;
    logic [($clog2(ROW_DIMENSION))-1:0] D_player_y_pos_d, D_player_y_pos_q = 4'he;
    logic [($clog2(COLUMN_DIMENSION))-1:0] D_bullet_x_d, D_bullet_x_q = 1'h0;
    logic [($clog2(ROW_DIMENSION))-1:0] D_bullet_y_d, D_bullet_y_q = 4'hc;
    always @* begin
        D_cooldown_d = D_cooldown_q;
        D_bullet_timer_d = D_bullet_timer_q;
        D_player_x_pos_d = D_player_x_pos_q;
        D_player_y_pos_d = D_player_y_pos_q;
        D_player_health_d = D_player_health_q;
        D_timer_d = D_timer_q;
        D_score_d = D_score_q;
        D_sprite_d = D_sprite_q;
        D_bullet_color_d = D_bullet_color_q;
        D_bullet_x_d = D_bullet_x_q;
        D_bullet_y_d = D_bullet_y_q;
        D_enemy_encoding_d = D_enemy_encoding_q;
        D_stage_counter_d = D_stage_counter_q;
        D_check_boundary_d = D_check_boundary_q;
        D_bullet_active_d = D_bullet_active_q;
        D_temp_reg_d = D_temp_reg_q;
        
        led = 8'h0;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 8'hff;
        io_select = 4'hf;
        D_cooldown_d = D_cooldown_q > 1'h0 ? D_cooldown_q - 1'h1 : 1'h0;
        D_bullet_timer_d = D_bullet_timer_q + 1'h1;
        if (we) begin
            
            case (wa)
                1'h0: begin
                    D_player_x_pos_d = regfile_data;
                end
                1'h1: begin
                    D_player_y_pos_d = regfile_data;
                end
                2'h2: begin
                    D_player_health_d = regfile_data;
                end
                2'h3: begin
                    D_timer_d = regfile_data;
                end
                3'h4: begin
                    D_score_d = regfile_data;
                end
                3'h5: begin
                    D_sprite_d = regfile_data;
                end
                3'h6: begin
                    D_bullet_color_d = regfile_data;
                end
                3'h7: begin
                    D_bullet_x_d = regfile_data;
                end
                4'h8: begin
                    D_bullet_y_d = regfile_data;
                end
                4'h9: begin
                    D_enemy_encoding_d = regfile_data;
                end
                4'ha: begin
                    D_stage_counter_d = regfile_data;
                end
                4'hb: begin
                    D_check_boundary_d = regfile_data;
                end
                4'hc: begin
                    D_bullet_timer_d = regfile_data;
                end
                4'hd: begin
                    D_bullet_active_d = regfile_data;
                end
                4'he: begin
                    D_cooldown_d = regfile_data;
                end
                4'hf: begin
                    D_temp_reg_d = regfile_data;
                end
            endcase
        end
        
        case (ra1)
            1'h0: begin
                rd1 = D_player_x_pos_q;
            end
            1'h1: begin
                rd1 = D_player_y_pos_q;
            end
            2'h2: begin
                rd1 = D_player_health_q;
            end
            2'h3: begin
                rd1 = D_timer_q;
            end
            3'h4: begin
                rd1 = D_score_q;
            end
            3'h5: begin
                rd1 = D_sprite_q;
            end
            3'h6: begin
                rd1 = D_bullet_color_q;
            end
            3'h7: begin
                rd1 = D_bullet_x_q;
            end
            4'h8: begin
                rd1 = D_bullet_y_q;
            end
            4'h9: begin
                rd1 = D_enemy_encoding_q;
            end
            4'ha: begin
                rd1 = D_stage_counter_q;
            end
            4'hb: begin
                rd1 = D_check_boundary_q;
            end
            4'hc: begin
                rd1 = D_bullet_timer_q;
            end
            4'hd: begin
                rd1 = D_bullet_active_q;
            end
            4'he: begin
                rd1 = D_cooldown_q;
            end
            4'hf: begin
                rd1 = D_temp_reg_q;
            end
            default: begin
                rd1 = 1'h0;
            end
        endcase
        
        case (ra2)
            1'h0: begin
                rd2 = D_player_x_pos_q;
            end
            1'h1: begin
                rd2 = D_player_y_pos_q;
            end
            2'h2: begin
                rd2 = D_player_health_q;
            end
            2'h3: begin
                rd2 = D_timer_q;
            end
            3'h4: begin
                rd2 = D_score_q;
            end
            3'h5: begin
                rd2 = D_sprite_q;
            end
            3'h6: begin
                rd2 = D_bullet_color_q;
            end
            3'h7: begin
                rd2 = D_bullet_x_q;
            end
            4'h8: begin
                rd2 = D_bullet_y_q;
            end
            4'h9: begin
                rd2 = D_enemy_encoding_q;
            end
            4'ha: begin
                rd2 = D_stage_counter_q;
            end
            4'hb: begin
                rd2 = D_check_boundary_q;
            end
            4'hc: begin
                rd2 = D_bullet_timer_q;
            end
            4'hd: begin
                rd2 = D_bullet_active_q;
            end
            4'he: begin
                rd2 = D_cooldown_q;
            end
            4'hf: begin
                rd2 = D_temp_reg_q;
            end
            default: begin
                rd2 = 1'h0;
            end
        endcase
        player_pos_x_out = D_player_x_pos_q;
        player_pos_y_out = D_player_y_pos_q;
        timer_out = D_timer_q;
        score_out = D_score_q;
        sprite_out = D_sprite_q;
        bullet_color_out = D_bullet_color_q;
        player_bullet_x_out = D_bullet_x_q;
        player_bullet_y_out = D_bullet_y_q;
        enemy_encoding_out = D_enemy_encoding_q;
        stage_counter_out = D_stage_counter_q;
        player_health_out = D_player_health_q;
        check_boundary_out = D_check_boundary_q;
        bullet_active_out = D_bullet_active_q;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_player_health_q <= 1'h0;
            D_timer_q <= 1'h0;
            D_score_q <= 1'h0;
            D_sprite_q <= 1'h0;
            D_bullet_color_q <= 1'h0;
            D_enemy_encoding_q <= 1'h0;
            D_stage_counter_q <= 1'h0;
            D_check_boundary_q <= 1'h0;
            D_cooldown_q <= 1'h0;
            D_bullet_timer_q <= 1'h0;
            D_bullet_active_q <= 1'h0;
            D_temp_reg_q <= 1'h0;
            D_player_x_pos_q <= 3'h7;
            D_player_y_pos_q <= 4'he;
            D_bullet_x_q <= 1'h0;
            D_bullet_y_q <= 4'hc;
        end else begin
            D_player_health_q <= D_player_health_d;
            D_timer_q <= D_timer_d;
            D_score_q <= D_score_d;
            D_sprite_q <= D_sprite_d;
            D_bullet_color_q <= D_bullet_color_d;
            D_enemy_encoding_q <= D_enemy_encoding_d;
            D_stage_counter_q <= D_stage_counter_d;
            D_check_boundary_q <= D_check_boundary_d;
            D_cooldown_q <= D_cooldown_d;
            D_bullet_timer_q <= D_bullet_timer_d;
            D_bullet_active_q <= D_bullet_active_d;
            D_temp_reg_q <= D_temp_reg_d;
            D_player_x_pos_q <= D_player_x_pos_d;
            D_player_y_pos_q <= D_player_y_pos_d;
            D_bullet_x_q <= D_bullet_x_d;
            D_bullet_y_q <= D_bullet_y_d;
        end
    end
endmodule
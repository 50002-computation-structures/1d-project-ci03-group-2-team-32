/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module player_mode #(
        parameter COLUMN_DIMENSION = 16'h10,
        parameter ROW_DIMENSION = 16'h10,
        parameter PIXEL_COUNT = 16'h100,
        parameter BUFFER_SIZE = 11'h400
    ) (
        input wire clk,
        input wire rst,
        output reg [7:0] led,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip,
        output reg data
    );
    localparam CLK_FREQ = 27'h5f5e100;
    localparam ENCODING_AMOUNT = 3'h4;
    localparam logic [3:0][23:0] LEDCOLOR = {{24'hf0f0f, 24'h30000, 24'h300, 24'h0}};
    localparam E_States_IDLE = 2'h0;
    localparam E_States_UPDATE_RAM = 2'h1;
    localparam E_States_REFRESH = 2'h2;
    localparam _MP_SIZE_1751082562 = $clog2(PIXEL_COUNT);
    localparam _MP_COLUMN_DIMENSION_1751082562 = COLUMN_DIMENSION;
    logic [(_MP_SIZE_1751082562)-1:0] M_index_reverser_input_address;
    logic [(_MP_SIZE_1751082562)-1:0] M_index_reverser_output_address;
    
    index_reverser #(
        .SIZE(_MP_SIZE_1751082562),
        .COLUMN_DIMENSION(_MP_COLUMN_DIMENSION_1751082562)
    ) index_reverser (
        .input_address(M_index_reverser_input_address),
        .output_address(M_index_reverser_output_address)
    );
    
    
    localparam _MP_ROW_DIMENSION_809609052 = ROW_DIMENSION;
    localparam _MP_COLUMN_DIMENSION_809609052 = COLUMN_DIMENSION;
    localparam _MP_ENCODING_AMOUNT_809609052 = 3'h4;
    logic M_ram_update;
    logic [($clog2(_MP_COLUMN_DIMENSION_809609052))-1:0] M_ram_player_x_pos;
    logic [($clog2(_MP_ROW_DIMENSION_809609052))-1:0] M_ram_player_y_pos;
    logic [($clog2(_MP_COLUMN_DIMENSION_809609052))-1:0] M_ram_bullet_x;
    logic [($clog2(_MP_ROW_DIMENSION_809609052))-1:0] M_ram_bullet_y;
    logic M_ram_bullet_active;
    logic [($clog2((5'h10)'(_MP_ROW_DIMENSION_809609052 * _MP_COLUMN_DIMENSION_809609052)))-1:0] M_ram_address;
    logic [1:0] M_ram_out_encoding;
    logic M_ram_ready;
    logic [($clog2((5'h10)'(_MP_ROW_DIMENSION_809609052 * _MP_COLUMN_DIMENSION_809609052)))-1:0] M_ram_debug_address_pointer;
    logic [2:0] M_ram_debug_data;
    
    data_ram #(
        .ROW_DIMENSION(_MP_ROW_DIMENSION_809609052),
        .COLUMN_DIMENSION(_MP_COLUMN_DIMENSION_809609052),
        .ENCODING_AMOUNT(_MP_ENCODING_AMOUNT_809609052)
    ) ram (
        .clk(clk),
        .rst(rst),
        .update(M_ram_update),
        .player_x_pos(M_ram_player_x_pos),
        .player_y_pos(M_ram_player_y_pos),
        .bullet_x(M_ram_bullet_x),
        .bullet_y(M_ram_bullet_y),
        .bullet_active(M_ram_bullet_active),
        .address(M_ram_address),
        .out_encoding(M_ram_out_encoding),
        .ready(M_ram_ready),
        .debug_address_pointer(M_ram_debug_address_pointer),
        .debug_data(M_ram_debug_data)
    );
    
    
    logic [($clog2(COLUMN_DIMENSION))-1:0] D_player_x_pos_d, D_player_x_pos_q = 3'h7;
    logic [($clog2(ROW_DIMENSION))-1:0] D_player_y_pos_d, D_player_y_pos_q = 4'he;
    logic [($clog2(COLUMN_DIMENSION))-1:0] D_bullet_x_d, D_bullet_x_q = 1'h0;
    logic [($clog2(ROW_DIMENSION))-1:0] D_bullet_y_d, D_bullet_y_q = 1'h0;
    logic D_bullet_active_d, D_bullet_active_q = 1'h0;
    logic D_update_ram_flag_d, D_update_ram_flag_q = 1'h0;
    logic [1:0] D_fsm_d, D_fsm_q = 2'h0;
    localparam _MP_PIXEL_COUNT_1923688485 = PIXEL_COUNT;
    logic M_driver_update;
    logic [23:0] M_driver_color;
    logic M_driver_clear;
    logic [($clog2(_MP_PIXEL_COUNT_1923688485))-1:0] M_driver_pixel_address;
    logic M_driver_data;
    logic M_driver_next_pixel;
    logic M_driver_reset;
    logic M_driver_done;
    
    ws2812b_driver #(
        .PIXEL_COUNT(_MP_PIXEL_COUNT_1923688485)
    ) driver (
        .clk(clk),
        .rst(rst),
        .update(M_driver_update),
        .color(M_driver_color),
        .clear(M_driver_clear),
        .pixel_address(M_driver_pixel_address),
        .data(M_driver_data),
        .next_pixel(M_driver_next_pixel),
        .reset(M_driver_reset),
        .done(M_driver_done)
    );
    
    
    logic [3:0] D_cooldown_d, D_cooldown_q = 1'h0;
    logic [19:0] D_bullet_timer_d, D_bullet_timer_q = 1'h0;
    localparam logic [4:0][26:0] _MP_CLK_FREQ_534974027 = {{27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100}};
    localparam _MP_MIN_DELAY_534974027 = 5'h14;
    localparam _MP_NUM_SYNC_534974027 = 2'h2;
    logic [4:0] M_movement_button_in;
    logic [4:0] M_movement_button_out;
    logic [4:0][0:0] M_movement_button_clk = {3'h5{{clk}}};
    
    genvar idx_0_534974027;
    
    generate
        for (idx_0_534974027 = 0; idx_0_534974027 < 5; idx_0_534974027 = idx_0_534974027 + 1) begin: forLoop_idx_0_534974027
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_534974027[idx_0_534974027]),
                .MIN_DELAY(_MP_MIN_DELAY_534974027),
                .NUM_SYNC(_MP_NUM_SYNC_534974027)
            ) movement_button (
                .clk(M_movement_button_clk[idx_0_534974027]),
                .in(M_movement_button_in[idx_0_534974027]),
                .out(M_movement_button_out[idx_0_534974027])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][0:0] _MP_RISE_850780918 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [4:0][0:0] _MP_FALL_850780918 = {{1'h0, 1'h0, 1'h0, 1'h0, 1'h0}};
    logic [4:0] M_movement_button_edge_in;
    logic [4:0] M_movement_button_edge_out;
    logic [4:0][0:0] M_movement_button_edge_clk = {3'h5{{clk}}};
    
    genvar idx_0_850780918;
    
    generate
        for (idx_0_850780918 = 0; idx_0_850780918 < 5; idx_0_850780918 = idx_0_850780918 + 1) begin: forLoop_idx_0_850780918
            edge_detector #(
                .RISE(_MP_RISE_850780918[idx_0_850780918]),
                .FALL(_MP_FALL_850780918[idx_0_850780918])
            ) movement_button_edge (
                .clk(M_movement_button_edge_clk[idx_0_850780918]),
                .in(M_movement_button_edge_in[idx_0_850780918]),
                .out(M_movement_button_edge_out[idx_0_850780918])
            );
        end
    endgenerate
    
    
    always @* begin
        D_player_x_pos_d = D_player_x_pos_q;
        D_player_y_pos_d = D_player_y_pos_q;
        D_bullet_x_d = D_bullet_x_q;
        D_bullet_y_d = D_bullet_y_q;
        D_bullet_active_d = D_bullet_active_q;
        D_update_ram_flag_d = D_update_ram_flag_q;
        D_fsm_d = D_fsm_q;
        D_cooldown_d = D_cooldown_q;
        D_bullet_timer_d = D_bullet_timer_q;
        
        led = 8'h0;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 8'hff;
        io_select = 4'hf;
        data = 1'h0;
        D_player_x_pos_d = D_player_x_pos_q;
        D_player_y_pos_d = D_player_y_pos_q;
        D_bullet_x_d = D_bullet_x_q;
        D_bullet_y_d = D_bullet_y_q;
        D_bullet_active_d = D_bullet_active_q;
        D_update_ram_flag_d = D_update_ram_flag_q;
        D_fsm_d = D_fsm_q;
        D_cooldown_d = D_cooldown_q > 1'h0 ? D_cooldown_q - 1'h1 : 1'h0;
        D_bullet_timer_d = D_bullet_timer_q + 1'h1;
        M_ram_address = 1'h0;
        M_movement_button_in = {io_button[1'h1], io_button[3'h4], io_button[2'h3], io_button[2'h2], io_button[1'h0]};
        M_movement_button_edge_in = M_movement_button_out;
        M_driver_update = 1'h0;
        M_driver_clear = 1'h0;
        if (M_movement_button_edge_out[1'h0] && D_player_y_pos_q > 4'hb) begin
            D_player_y_pos_d = D_player_y_pos_q - 1'h1;
        end
        if (M_movement_button_edge_out[1'h1] && D_player_y_pos_q < COLUMN_DIMENSION - 2'h2) begin
            D_player_y_pos_d = D_player_y_pos_q + 1'h1;
        end
        if (M_movement_button_edge_out[2'h2] && D_player_x_pos_q < COLUMN_DIMENSION - 2'h2) begin
            D_player_x_pos_d = D_player_x_pos_q + 1'h1;
        end
        if (M_movement_button_edge_out[2'h3] && D_player_x_pos_q > 1'h1) begin
            D_player_x_pos_d = D_player_x_pos_q - 1'h1;
        end
        if (M_movement_button_edge_out[3'h4] && D_cooldown_q == 1'h0 && !D_bullet_active_q) begin
            D_bullet_x_d = D_player_x_pos_q;
            D_bullet_y_d = D_player_y_pos_q - 1'h1;
            D_bullet_active_d = 1'h1;
            D_cooldown_d = 4'ha;
            D_update_ram_flag_d = 1'h1;
        end
        if (D_bullet_active_q && D_bullet_timer_q >= 20'hf4240) begin
            D_bullet_timer_d = 1'h0;
            if (D_bullet_y_q > 1'h0) begin
                D_bullet_y_d = D_bullet_y_q - 1'h1;
                D_update_ram_flag_d = 1'h1;
            end else begin
                D_bullet_active_d = 1'h0;
            end
        end
        if ((|M_movement_button_edge_out[2'h3:1'h0] | D_bullet_active_q)) begin
            D_update_ram_flag_d = 1'h1;
        end
        M_ram_player_x_pos = D_player_x_pos_q;
        M_ram_player_y_pos = D_player_y_pos_q;
        M_ram_bullet_x = D_bullet_x_q;
        M_ram_bullet_y = D_bullet_y_q;
        M_ram_bullet_active = D_bullet_active_q;
        M_ram_update = 1'h0;
        M_index_reverser_input_address = M_driver_pixel_address;
        M_ram_address = 1'h0;
        
        case (D_fsm_q)
            2'h1: begin
                if (M_ram_ready & M_driver_reset) begin
                    D_update_ram_flag_d = 1'h0;
                    D_fsm_d = 2'h2;
                    M_ram_address = M_index_reverser_output_address;
                    M_driver_update = 1'h1;
                end
                led[1'h1:1'h0] = 2'h2;
            end
            2'h2: begin
                if (M_driver_next_pixel) begin
                    M_index_reverser_input_address = M_driver_pixel_address + 1'h1;
                end
                M_ram_address = M_index_reverser_output_address;
                if (M_driver_done) begin
                    D_fsm_d = 2'h0;
                end
                led[1'h1:1'h0] = 2'h3;
            end
            2'h0: begin
                if (D_update_ram_flag_q) begin
                    D_fsm_d = 2'h1;
                    M_ram_update = 1'h1;
                end
                led[1'h1:1'h0] = 2'h1;
                M_index_reverser_input_address = M_ram_debug_address_pointer;
            end
        endcase
        M_driver_color = LEDCOLOR[M_ram_out_encoding];
        data = M_driver_data;
        io_led[1'h0] = D_player_x_pos_q;
        io_led[1'h1] = D_player_y_pos_q;
        io_led[2'h2] = M_driver_pixel_address;
        led[3'h7:3'h5] = M_ram_debug_data;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_player_x_pos_q <= 3'h7;
            D_player_y_pos_q <= 4'he;
            D_bullet_x_q <= 1'h0;
            D_bullet_y_q <= 1'h0;
            D_bullet_active_q <= 1'h0;
            D_update_ram_flag_q <= 1'h0;
            D_fsm_q <= 2'h0;
            D_cooldown_q <= 1'h0;
            D_bullet_timer_q <= 1'h0;
        end else begin
            D_player_x_pos_q <= D_player_x_pos_d;
            D_player_y_pos_q <= D_player_y_pos_d;
            D_bullet_x_q <= D_bullet_x_d;
            D_bullet_y_q <= D_bullet_y_d;
            D_bullet_active_q <= D_bullet_active_d;
            D_update_ram_flag_q <= D_update_ram_flag_d;
            D_fsm_q <= D_fsm_d;
            D_cooldown_q <= D_cooldown_d;
            D_bullet_timer_q <= D_bullet_timer_d;
        end
    end
endmodule
/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module game_regfile #(
        parameter COLUMN_DIMENSION = 16'h10,
        parameter ROW_DIMENSION = 16'h10
    ) (
        input wire clk,
        input wire rst,
        input wire [4:0] wa,
        input wire we,
        input wire [31:0] regfile_data,
        input wire [4:0] ra1,
        input wire [4:0] ra2,
        output reg [31:0] rd1,
        output reg [31:0] rd2,
        output reg [31:0] player_pos_x_out,
        output reg [31:0] player_pos_y_out,
        output reg [31:0] enemy_A_active_out,
        output reg [31:0] timer_out,
        output reg [31:0] score_out,
        output reg [31:0] enemy_B_active_out,
        output reg [31:0] bullet_color_out,
        output reg [31:0] player_bullet_x_out,
        output reg [31:0] player_bullet_y_out,
        output reg [31:0] enemy_C_active_out,
        output reg [31:0] check_boundary_out,
        output reg [31:0] bullet_active_out,
        output reg [31:0] enemy_stage_pointer_out,
        output reg [31:0] bullet_encode_out,
        output reg [31:0] enemy_A_x_out,
        output reg [31:0] enemy_A_y_out,
        output reg [31:0] enemy_A_color_out,
        output reg [31:0] enemy_B_x_out,
        output reg [31:0] enemy_B_y_out,
        output reg [31:0] enemy_B_color_out,
        output reg [31:0] enemy_C_x_out,
        output reg [31:0] enemy_C_y_out,
        output reg [31:0] enemy_C_color_out,
        output reg [7:0] led,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select
    );
    logic [31:0] D_enemy_C_active_d, D_enemy_C_active_q = 1'h0;
    logic [31:0] D_timer_d, D_timer_q = 1'h0;
    logic [31:0] D_score_d, D_score_q = 1'h0;
    logic [31:0] D_enemy_A_active_d, D_enemy_A_active_q = 1'h0;
    logic [31:0] D_bullet_color_d, D_bullet_color_q = 1'h0;
    logic [31:0] D_enemy_B_active_d, D_enemy_B_active_q = 1'h0;
    logic [31:0] D_bullet_encode_d, D_bullet_encode_q = 1'h0;
    logic [31:0] D_check_boundary_d, D_check_boundary_q = 1'h0;
    logic [31:0] D_enemy_stage_pointer_d, D_enemy_stage_pointer_q = 1'h0;
    logic [31:0] D_bullet_timer_d, D_bullet_timer_q = 1'h0;
    logic [31:0] D_bullet_active_d, D_bullet_active_q = 1'h0;
    logic [($clog2(COLUMN_DIMENSION))-1:0] D_player_x_pos_d, D_player_x_pos_q = 3'h7;
    logic [($clog2(ROW_DIMENSION))-1:0] D_player_y_pos_d, D_player_y_pos_q = 4'he;
    logic [($clog2(COLUMN_DIMENSION))-1:0] D_bullet_x_d, D_bullet_x_q = 1'h0;
    logic [($clog2(ROW_DIMENSION))-1:0] D_bullet_y_d, D_bullet_y_q = 4'hd;
    logic [31:0] D_enemy_A_data_d, D_enemy_A_data_q = 1'h0;
    logic [31:0] D_enemy_B_data_d, D_enemy_B_data_q = 1'h0;
    logic [31:0] D_enemy_C_data_d, D_enemy_C_data_q = 1'h0;
    logic [31:0] D_check_enemy_d, D_check_enemy_q = 1'h0;
    logic [31:0] D_temp_reg1_d, D_temp_reg1_q = 1'h0;
    logic [31:0] D_temp_reg2_d, D_temp_reg2_q = 1'h0;
    logic [31:0] D_temp_reg3_d, D_temp_reg3_q = 1'h0;
    always @* begin
        D_player_x_pos_d = D_player_x_pos_q;
        D_player_y_pos_d = D_player_y_pos_q;
        D_timer_d = D_timer_q;
        D_score_d = D_score_q;
        D_enemy_A_active_d = D_enemy_A_active_q;
        D_enemy_B_active_d = D_enemy_B_active_q;
        D_bullet_color_d = D_bullet_color_q;
        D_bullet_x_d = D_bullet_x_q;
        D_bullet_y_d = D_bullet_y_q;
        D_enemy_C_active_d = D_enemy_C_active_q;
        D_bullet_encode_d = D_bullet_encode_q;
        D_check_boundary_d = D_check_boundary_q;
        D_bullet_timer_d = D_bullet_timer_q;
        D_bullet_active_d = D_bullet_active_q;
        D_enemy_stage_pointer_d = D_enemy_stage_pointer_q;
        D_enemy_A_data_d = D_enemy_A_data_q;
        D_enemy_B_data_d = D_enemy_B_data_q;
        D_enemy_C_data_d = D_enemy_C_data_q;
        D_check_enemy_d = D_check_enemy_q;
        D_temp_reg1_d = D_temp_reg1_q;
        D_temp_reg2_d = D_temp_reg2_q;
        D_temp_reg3_d = D_temp_reg3_q;
        
        led = 8'h0;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 8'hff;
        io_select = 4'hf;
        if (we) begin
            
            case (wa)
                1'h0: begin
                    D_player_x_pos_d = regfile_data;
                end
                1'h1: begin
                    D_player_y_pos_d = regfile_data;
                end
                2'h2: begin
                    D_timer_d = regfile_data;
                end
                2'h3: begin
                    D_score_d = regfile_data;
                end
                3'h4: begin
                    D_enemy_A_active_d = regfile_data;
                end
                3'h5: begin
                    D_enemy_B_active_d = regfile_data;
                end
                3'h6: begin
                    D_bullet_color_d = regfile_data;
                end
                3'h7: begin
                    D_bullet_x_d = regfile_data;
                end
                4'h8: begin
                    D_bullet_y_d = regfile_data;
                end
                4'h9: begin
                    D_enemy_C_active_d = regfile_data;
                end
                4'ha: begin
                    D_bullet_encode_d = regfile_data;
                end
                4'hb: begin
                    D_check_boundary_d = regfile_data;
                end
                4'hc: begin
                    D_bullet_timer_d = regfile_data;
                end
                4'hd: begin
                    D_bullet_active_d = regfile_data;
                end
                4'he: begin
                    D_enemy_stage_pointer_d = regfile_data;
                end
                4'hf: begin
                    D_enemy_A_data_d = regfile_data;
                end
                5'h10: begin
                    D_enemy_B_data_d = regfile_data;
                end
                5'h11: begin
                    D_enemy_C_data_d = regfile_data;
                end
                5'h12: begin
                    D_check_enemy_d = regfile_data;
                end
                5'h13: begin
                    D_temp_reg1_d = regfile_data;
                end
                5'h14: begin
                    D_temp_reg2_d = regfile_data;
                end
                5'h15: begin
                    D_temp_reg3_d = regfile_data;
                end
            endcase
        end
        
        case (ra1)
            1'h0: begin
                rd1 = D_player_x_pos_q;
            end
            1'h1: begin
                rd1 = D_player_y_pos_q;
            end
            2'h2: begin
                rd1 = D_timer_q;
            end
            2'h3: begin
                rd1 = D_score_q;
            end
            3'h4: begin
                rd1 = D_enemy_A_active_q;
            end
            3'h5: begin
                rd1 = D_enemy_B_active_q;
            end
            3'h6: begin
                rd1 = D_bullet_color_q;
            end
            3'h7: begin
                rd1 = D_bullet_x_q;
            end
            4'h8: begin
                rd1 = D_bullet_y_q;
            end
            4'h9: begin
                rd1 = D_enemy_C_active_q;
            end
            4'ha: begin
                rd1 = D_bullet_encode_q;
            end
            4'hb: begin
                rd1 = D_check_boundary_q;
            end
            4'hc: begin
                rd1 = D_bullet_timer_q;
            end
            4'hd: begin
                rd1 = D_bullet_active_q;
            end
            4'he: begin
                rd1 = D_enemy_stage_pointer_q;
            end
            4'hf: begin
                rd1 = D_enemy_A_data_q;
            end
            5'h10: begin
                rd1 = D_enemy_B_data_q;
            end
            5'h11: begin
                rd1 = D_enemy_C_data_q;
            end
            5'h12: begin
                rd1 = D_check_enemy_q;
            end
            5'h13: begin
                rd1 = D_temp_reg1_q;
            end
            5'h14: begin
                rd1 = D_temp_reg2_q;
            end
            5'h15: begin
                rd1 = D_temp_reg3_q;
            end
            default: begin
                rd1 = 1'h0;
            end
        endcase
        
        case (ra2)
            1'h0: begin
                rd2 = D_player_x_pos_q;
            end
            1'h1: begin
                rd2 = D_player_y_pos_q;
            end
            2'h2: begin
                rd2 = D_timer_q;
            end
            2'h3: begin
                rd2 = D_score_q;
            end
            3'h4: begin
                rd2 = D_enemy_A_active_q;
            end
            3'h5: begin
                rd2 = D_enemy_B_active_q;
            end
            3'h6: begin
                rd2 = D_bullet_color_q;
            end
            3'h7: begin
                rd2 = D_bullet_x_q;
            end
            4'h8: begin
                rd2 = D_bullet_y_q;
            end
            4'h9: begin
                rd2 = D_enemy_C_active_q;
            end
            4'ha: begin
                rd2 = D_bullet_encode_q;
            end
            4'hb: begin
                rd2 = D_check_boundary_q;
            end
            4'hc: begin
                rd2 = D_bullet_timer_q;
            end
            4'hd: begin
                rd2 = D_bullet_active_q;
            end
            4'he: begin
                rd2 = D_enemy_stage_pointer_q;
            end
            4'hf: begin
                rd2 = D_enemy_A_data_q;
            end
            5'h10: begin
                rd2 = D_enemy_B_data_q;
            end
            5'h11: begin
                rd2 = D_enemy_C_data_q;
            end
            5'h12: begin
                rd2 = D_check_enemy_q;
            end
            5'h13: begin
                rd2 = D_temp_reg1_q;
            end
            5'h14: begin
                rd2 = D_temp_reg2_q;
            end
            5'h15: begin
                rd2 = D_temp_reg3_q;
            end
            default: begin
                rd2 = 1'h0;
            end
        endcase
        player_pos_x_out = D_player_x_pos_q;
        player_pos_y_out = D_player_y_pos_q;
        timer_out = D_timer_q;
        score_out = D_score_q;
        bullet_color_out = D_bullet_color_q;
        player_bullet_x_out = D_bullet_x_q;
        player_bullet_y_out = D_bullet_y_q;
        check_boundary_out = D_check_boundary_q;
        bullet_encode_out = D_bullet_encode_q;
        enemy_stage_pointer_out = D_enemy_stage_pointer_q;
        bullet_active_out = D_bullet_active_q;
        enemy_A_x_out = D_enemy_A_data_q[5'h17:5'h10];
        enemy_A_y_out = D_enemy_A_data_q[4'hf:4'h8];
        enemy_A_color_out = D_enemy_A_data_q[3'h7:1'h0];
        enemy_A_active_out = D_enemy_A_active_q;
        enemy_B_x_out = D_enemy_B_data_q[5'h17:5'h10];
        enemy_B_y_out = D_enemy_B_data_q[4'hf:4'h8];
        enemy_B_color_out = D_enemy_B_data_q[3'h7:1'h0];
        enemy_B_active_out = D_enemy_B_active_q;
        enemy_C_x_out = D_enemy_C_data_q[5'h17:5'h10];
        enemy_C_y_out = D_enemy_C_data_q[4'hf:4'h8];
        enemy_C_color_out = D_enemy_C_data_q[3'h7:1'h0];
        enemy_C_active_out = D_enemy_C_active_q;
        io_led[1'h0] = D_score_q[3'h7:1'h0];
        io_led[1'h1] = D_enemy_A_data_q[4'hf:4'h8];
        io_led[2'h2] = D_enemy_A_data_q[3'h7:1'h0];
        led = D_player_x_pos_q;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_enemy_C_active_q <= 1'h0;
            D_timer_q <= 1'h0;
            D_score_q <= 1'h0;
            D_enemy_A_active_q <= 1'h0;
            D_bullet_color_q <= 1'h0;
            D_enemy_B_active_q <= 1'h0;
            D_bullet_encode_q <= 1'h0;
            D_check_boundary_q <= 1'h0;
            D_enemy_stage_pointer_q <= 1'h0;
            D_bullet_timer_q <= 1'h0;
            D_bullet_active_q <= 1'h0;
            D_player_x_pos_q <= 3'h7;
            D_player_y_pos_q <= 4'he;
            D_bullet_x_q <= 1'h0;
            D_bullet_y_q <= 4'hd;
            D_enemy_A_data_q <= 1'h0;
            D_enemy_B_data_q <= 1'h0;
            D_enemy_C_data_q <= 1'h0;
            D_check_enemy_q <= 1'h0;
            D_temp_reg1_q <= 1'h0;
            D_temp_reg2_q <= 1'h0;
            D_temp_reg3_q <= 1'h0;
        end else begin
            D_enemy_C_active_q <= D_enemy_C_active_d;
            D_timer_q <= D_timer_d;
            D_score_q <= D_score_d;
            D_enemy_A_active_q <= D_enemy_A_active_d;
            D_bullet_color_q <= D_bullet_color_d;
            D_enemy_B_active_q <= D_enemy_B_active_d;
            D_bullet_encode_q <= D_bullet_encode_d;
            D_check_boundary_q <= D_check_boundary_d;
            D_enemy_stage_pointer_q <= D_enemy_stage_pointer_d;
            D_bullet_timer_q <= D_bullet_timer_d;
            D_bullet_active_q <= D_bullet_active_d;
            D_player_x_pos_q <= D_player_x_pos_d;
            D_player_y_pos_q <= D_player_y_pos_d;
            D_bullet_x_q <= D_bullet_x_d;
            D_bullet_y_q <= D_bullet_y_d;
            D_enemy_A_data_q <= D_enemy_A_data_d;
            D_enemy_B_data_q <= D_enemy_B_data_d;
            D_enemy_C_data_q <= D_enemy_C_data_d;
            D_check_enemy_q <= D_check_enemy_d;
            D_temp_reg1_q <= D_temp_reg1_d;
            D_temp_reg2_q <= D_temp_reg2_d;
            D_temp_reg3_q <= D_temp_reg3_d;
        end
    end
endmodule
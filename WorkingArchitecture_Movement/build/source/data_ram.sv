/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module data_ram #(
        parameter ROW_DIMENSION = 4'h8,
        parameter COLUMN_DIMENSION = 4'h8,
        parameter ENCODING_AMOUNT = 3'h4
    ) (
        input wire clk,
        input wire rst,
        input wire update,
        input wire [($clog2(COLUMN_DIMENSION))-1:0] player_x_pos,
        input wire [($clog2(ROW_DIMENSION))-1:0] player_y_pos,
        input wire [($clog2(COLUMN_DIMENSION))-1:0] bullet_x,
        input wire [($clog2(ROW_DIMENSION))-1:0] bullet_y,
        input wire bullet_active,
        input wire [($clog2((5'h10)'(ROW_DIMENSION * COLUMN_DIMENSION)))-1:0] address,
        output reg [1:0] out_encoding,
        output reg ready,
        output reg [($clog2((5'h10)'(ROW_DIMENSION * COLUMN_DIMENSION)))-1:0] debug_address_pointer,
        output reg [2:0] debug_data
    );
    localparam DEPTH = (5'h10)'(COLUMN_DIMENSION * ROW_DIMENSION);
    localparam E_States_INIT = 4'h0;
    localparam E_States_WRITE_TOP = 4'h1;
    localparam E_States_WRITE_BOTTOM_RIGHT = 4'h2;
    localparam E_States_WRITE_BOTTOM_MIDDLE = 4'h3;
    localparam E_States_WRITE_BOTTOM_LEFT = 4'h4;
    localparam E_States_ERASE_TOP = 4'h5;
    localparam E_States_ERASE_BOTTOM_MIDDLE = 4'h6;
    localparam E_States_ERASE_BOTTOM_LEFT = 4'h7;
    localparam E_States_ERASE_BOTTOM_RIGHT = 4'h8;
    localparam E_States_WRITE_BULLET = 4'h9;
    localparam E_States_ERASE_BULLET = 4'ha;
    localparam E_States_IDLE = 4'hb;
    logic [3:0] D_fsm_d, D_fsm_q = 4'h0;
    logic [($clog2(DEPTH))-1:0] D_player_writer_pointer_d, D_player_writer_pointer_q = 1'h0;
    logic [($clog2(DEPTH))-1:0] D_bullet_writer_pointer_d, D_bullet_writer_pointer_q = 1'h0;
    logic D_update_flag_d, D_update_flag_q = 1'h0;
    logic D_bullet_written_d, D_bullet_written_q = 1'h0;
    logic [($clog2(DEPTH))-1:0] D_bullet_last_addr_d, D_bullet_last_addr_q = 1'h0;
    localparam BACKGROUND_COLOR = 2'h0;
    localparam PLAYER_COLOR = 2'h1;
    localparam BULLET_COLOR = 2'h2;
    localparam _MP_WIDTH_444414528 = $clog2(ENCODING_AMOUNT);
    localparam _MP_ENTRIES_444414528 = DEPTH;
    logic [((($clog2(_MP_ENTRIES_444414528)-1) - (0) + 1))-1:0] M_ram_waddr;
    logic [(((_MP_WIDTH_444414528-1) - (0) + 1))-1:0] M_ram_write_data;
    logic M_ram_write_enable;
    logic [((($clog2(_MP_ENTRIES_444414528)-1) - (0) + 1))-1:0] M_ram_raddr;
    logic [(((_MP_WIDTH_444414528-1) - (0) + 1))-1:0] M_ram_read_data;
    
    simple_dual_port_ram #(
        .WIDTH(_MP_WIDTH_444414528),
        .ENTRIES(_MP_ENTRIES_444414528)
    ) ram (
        .rclk(clk),
        .wclk(clk),
        .waddr(M_ram_waddr),
        .write_data(M_ram_write_data),
        .write_enable(M_ram_write_enable),
        .raddr(M_ram_raddr),
        .read_data(M_ram_read_data)
    );
    
    
    always @* begin
        D_player_writer_pointer_d = D_player_writer_pointer_q;
        D_bullet_writer_pointer_d = D_bullet_writer_pointer_q;
        D_fsm_d = D_fsm_q;
        D_update_flag_d = D_update_flag_q;
        D_bullet_written_d = D_bullet_written_q;
        D_bullet_last_addr_d = D_bullet_last_addr_q;
        
        M_ram_raddr = 1'h0;
        M_ram_waddr = 1'h0;
        M_ram_write_data = 1'h0;
        M_ram_write_enable = 1'h0;
        out_encoding = 1'h0;
        debug_data = 1'h0;
        D_player_writer_pointer_d = D_player_writer_pointer_q;
        D_bullet_writer_pointer_d = D_bullet_writer_pointer_q;
        D_fsm_d = D_fsm_q;
        D_update_flag_d = D_update_flag_q;
        D_bullet_written_d = D_bullet_written_q;
        D_bullet_last_addr_d = D_bullet_last_addr_q;
        ready = D_fsm_q == 4'hb;
        if (update) begin
            D_update_flag_d = 1'h1;
        end
        
        case (D_fsm_q)
            4'h0: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_player_writer_pointer_q;
                if (D_player_writer_pointer_q == 1'h0) begin
                    M_ram_write_data = 2'h3;
                end else begin
                    if (D_player_writer_pointer_q == (COLUMN_DIMENSION - 1'h1)) begin
                        M_ram_write_data = 2'h2;
                    end else begin
                        if ((&D_player_writer_pointer_q)) begin
                            M_ram_write_data = 2'h1;
                        end else begin
                            M_ram_write_data = 2'h0;
                        end
                    end
                end
                D_player_writer_pointer_d = D_player_writer_pointer_q + 1'h1;
                if ((&D_player_writer_pointer_q)) begin
                    D_fsm_d = 4'h1;
                    D_player_writer_pointer_d = player_y_pos * COLUMN_DIMENSION + player_x_pos;
                end
                debug_data = 2'h1;
            end
            4'h5: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_player_writer_pointer_q;
                M_ram_write_data = 2'h0;
                D_fsm_d = 4'h6;
            end
            4'h6: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_player_writer_pointer_q + COLUMN_DIMENSION;
                M_ram_write_data = 2'h0;
                D_fsm_d = 4'h7;
            end
            4'h7: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_player_writer_pointer_q + 1'h1 + COLUMN_DIMENSION;
                M_ram_write_data = 2'h0;
                D_fsm_d = 4'h8;
            end
            4'h8: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_player_writer_pointer_q + COLUMN_DIMENSION - 1'h1;
                D_player_writer_pointer_d = player_y_pos * COLUMN_DIMENSION + player_x_pos;
                M_ram_write_data = 2'h0;
                D_fsm_d = 4'h1;
            end
            4'h1: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_player_writer_pointer_q;
                M_ram_write_data = 2'h1;
                D_fsm_d = 4'h3;
                debug_data = 2'h2;
            end
            4'h3: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_player_writer_pointer_q + COLUMN_DIMENSION;
                M_ram_write_data = 2'h1;
                D_fsm_d = 4'h4;
                debug_data = 2'h2;
            end
            4'h4: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_player_writer_pointer_q + 1'h1 + COLUMN_DIMENSION;
                M_ram_write_data = 2'h1;
                D_fsm_d = 4'h2;
            end
            4'h2: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_player_writer_pointer_q + COLUMN_DIMENSION - 1'h1;
                M_ram_write_data = 2'h1;
                if (bullet_active && D_bullet_written_q) begin
                    D_bullet_writer_pointer_d = D_bullet_last_addr_q;
                    D_fsm_d = 4'ha;
                end else begin
                    if (bullet_active && !D_bullet_written_q) begin
                        D_bullet_writer_pointer_d = bullet_y * COLUMN_DIMENSION + bullet_x;
                        D_fsm_d = 4'h9;
                    end else begin
                        if (!bullet_active && D_bullet_written_q) begin
                            D_bullet_writer_pointer_d = D_bullet_last_addr_q;
                            D_fsm_d = 4'ha;
                        end else begin
                            D_fsm_d = 4'hb;
                        end
                    end
                end
            end
            4'h9: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_bullet_writer_pointer_q;
                M_ram_write_data = 2'h2;
                D_bullet_written_d = 1'h1;
                D_bullet_last_addr_d = D_bullet_writer_pointer_q;
                D_fsm_d = 4'hb;
            end
            4'ha: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_bullet_writer_pointer_q;
                M_ram_write_data = 2'h0;
                D_bullet_written_d = 1'h0;
                D_fsm_d = 4'hb;
            end
            4'hb: begin
                M_ram_raddr = address;
                out_encoding = M_ram_read_data;
                debug_data = 1'h0;
                D_fsm_d = 4'hb;
                if (D_update_flag_q) begin
                    D_update_flag_d = 1'h0;
                    D_fsm_d = 4'h5;
                end
                debug_data = {2'h3, D_update_flag_q};
            end
        endcase
        debug_address_pointer = D_player_writer_pointer_q;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_fsm_q <= 4'h0;
            D_player_writer_pointer_q <= 1'h0;
            D_bullet_writer_pointer_q <= 1'h0;
            D_update_flag_q <= 1'h0;
            D_bullet_written_q <= 1'h0;
            D_bullet_last_addr_q <= 1'h0;
        end else begin
            D_fsm_q <= D_fsm_d;
            D_player_writer_pointer_q <= D_player_writer_pointer_d;
            D_bullet_writer_pointer_q <= D_bullet_writer_pointer_d;
            D_update_flag_q <= D_update_flag_d;
            D_bullet_written_q <= D_bullet_written_d;
            D_bullet_last_addr_q <= D_bullet_last_addr_d;
        end
    end
endmodule
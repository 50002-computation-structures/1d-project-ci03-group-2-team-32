/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module ram_mode #(
        parameter COLUMN_DIMENSION = 16'h10,
        parameter ROW_DIMENSION = 16'h10,
        parameter PIXEL_COUNT = 16'h100,
        parameter BUFFER_SIZE = 11'h400
    ) (
        input wire clk,
        input wire rst,
        output reg [7:0] led,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire left_btn,
        input wire right_btn,
        input wire [($clog2(COLUMN_DIMENSION))-1:0] player_pos_x_out,
        input wire [($clog2(COLUMN_DIMENSION))-1:0] player_pos_y_out,
        output reg data
    );
    localparam ENCODING_AMOUNT = 3'h4;
    localparam logic [3:0][23:0] LEDCOLOR = {{24'hf0f0f, 24'h30000, 24'h300, 24'h0}};
    localparam _MP_SIZE_577859938 = $clog2(PIXEL_COUNT);
    localparam _MP_COLUMN_DIMENSION_577859938 = COLUMN_DIMENSION;
    logic [(_MP_SIZE_577859938)-1:0] M_index_reverser_input_address;
    logic [(_MP_SIZE_577859938)-1:0] M_index_reverser_output_address;
    
    index_reverser #(
        .SIZE(_MP_SIZE_577859938),
        .COLUMN_DIMENSION(_MP_COLUMN_DIMENSION_577859938)
    ) index_reverser (
        .input_address(M_index_reverser_input_address),
        .output_address(M_index_reverser_output_address)
    );
    
    
    localparam _MP_ROW_DIMENSION_478820252 = ROW_DIMENSION;
    localparam _MP_COLUMN_DIMENSION_478820252 = COLUMN_DIMENSION;
    localparam _MP_ENCODING_AMOUNT_478820252 = 3'h4;
    logic M_ram_update;
    logic [($clog2(_MP_COLUMN_DIMENSION_478820252))-1:0] M_ram_player_x_pos;
    logic [($clog2(_MP_ROW_DIMENSION_478820252))-1:0] M_ram_player_y_pos;
    logic [($clog2(_MP_COLUMN_DIMENSION_478820252))-1:0] M_ram_bullet_x;
    logic [($clog2(_MP_ROW_DIMENSION_478820252))-1:0] M_ram_bullet_y;
    logic M_ram_bullet_active;
    logic [($clog2((5'h10)'(_MP_ROW_DIMENSION_478820252 * _MP_COLUMN_DIMENSION_478820252)))-1:0] M_ram_address;
    logic [1:0] M_ram_out_encoding;
    logic M_ram_ready;
    logic [($clog2((5'h10)'(_MP_ROW_DIMENSION_478820252 * _MP_COLUMN_DIMENSION_478820252)))-1:0] M_ram_debug_address_pointer;
    logic [2:0] M_ram_debug_data;
    
    data_ram #(
        .ROW_DIMENSION(_MP_ROW_DIMENSION_478820252),
        .COLUMN_DIMENSION(_MP_COLUMN_DIMENSION_478820252),
        .ENCODING_AMOUNT(_MP_ENCODING_AMOUNT_478820252)
    ) ram (
        .clk(clk),
        .rst(rst),
        .update(M_ram_update),
        .player_x_pos(M_ram_player_x_pos),
        .player_y_pos(M_ram_player_y_pos),
        .bullet_x(M_ram_bullet_x),
        .bullet_y(M_ram_bullet_y),
        .bullet_active(M_ram_bullet_active),
        .address(M_ram_address),
        .out_encoding(M_ram_out_encoding),
        .ready(M_ram_ready),
        .debug_address_pointer(M_ram_debug_address_pointer),
        .debug_data(M_ram_debug_data)
    );
    
    
    localparam _MP_PIXEL_COUNT_943986968 = PIXEL_COUNT;
    logic M_driver_update;
    logic [23:0] M_driver_color;
    logic M_driver_clear;
    logic [($clog2(_MP_PIXEL_COUNT_943986968))-1:0] M_driver_pixel_address;
    logic M_driver_data;
    logic M_driver_next_pixel;
    logic M_driver_reset;
    logic M_driver_done;
    
    ws2812b_driver #(
        .PIXEL_COUNT(_MP_PIXEL_COUNT_943986968)
    ) driver (
        .clk(clk),
        .rst(rst),
        .update(M_driver_update),
        .color(M_driver_color),
        .clear(M_driver_clear),
        .pixel_address(M_driver_pixel_address),
        .data(M_driver_data),
        .next_pixel(M_driver_next_pixel),
        .reset(M_driver_reset),
        .done(M_driver_done)
    );
    
    
    always @* begin
        led = 8'h0;
        io_segment = 8'hff;
        io_select = 4'hf;
        data = 1'h0;
        M_ram_address = 1'h0;
        M_ram_update = 1'h0;
        M_driver_update = 1'h0;
        M_driver_clear = 1'h0;
        if (left_btn | right_btn) begin
            M_ram_update = 1'h1;
        end
        M_ram_player_x_pos = player_pos_x_out;
        M_ram_player_y_pos = player_pos_y_out;
        M_ram_bullet_x = 1'h0;
        M_ram_bullet_y = 1'h1;
        M_ram_bullet_active = 1'h0;
        M_index_reverser_input_address = M_driver_pixel_address;
        M_driver_update = 1'h1;
        M_ram_address = M_index_reverser_output_address;
        M_driver_color = LEDCOLOR[M_ram_out_encoding];
        data = M_driver_data;
        io_led[1'h0] = player_pos_x_out;
        io_led[1'h1] = player_pos_y_out;
        io_led[2'h2] = M_driver_pixel_address;
        led[3'h7:3'h5] = M_ram_debug_data;
    end
    
    
endmodule
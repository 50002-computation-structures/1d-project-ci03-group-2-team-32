/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip,
        output reg data
    );
    logic rst;
    localparam CLK_FREQ = 24'h989680;
    localparam _MP_RISE_1448684503 = 1'h1;
    localparam _MP_FALL_1448684503 = 1'h0;
    logic M_edge_dt_btn_left_in;
    logic M_edge_dt_btn_left_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1448684503),
        .FALL(_MP_FALL_1448684503)
    ) edge_dt_btn_left (
        .clk(clk),
        .in(M_edge_dt_btn_left_in),
        .out(M_edge_dt_btn_left_out)
    );
    
    
    localparam _MP_RISE_797419207 = 1'h1;
    localparam _MP_FALL_797419207 = 1'h0;
    logic M_edge_dt_btn_right_in;
    logic M_edge_dt_btn_right_out;
    
    edge_detector #(
        .RISE(_MP_RISE_797419207),
        .FALL(_MP_FALL_797419207)
    ) edge_dt_btn_right (
        .clk(clk),
        .in(M_edge_dt_btn_right_in),
        .out(M_edge_dt_btn_right_out)
    );
    
    
    localparam _MP_CLK_FREQ_482856934 = 24'h989680;
    localparam _MP_MIN_DELAY_482856934 = 5'h14;
    localparam _MP_NUM_SYNC_482856934 = 2'h2;
    logic M_btn_cond_left_in;
    logic M_btn_cond_left_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_482856934),
        .MIN_DELAY(_MP_MIN_DELAY_482856934),
        .NUM_SYNC(_MP_NUM_SYNC_482856934)
    ) btn_cond_left (
        .clk(clk),
        .in(M_btn_cond_left_in),
        .out(M_btn_cond_left_out)
    );
    
    
    localparam _MP_CLK_FREQ_967297239 = 24'h989680;
    localparam _MP_MIN_DELAY_967297239 = 5'h14;
    localparam _MP_NUM_SYNC_967297239 = 2'h2;
    logic M_btn_cond_right_in;
    logic M_btn_cond_right_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_967297239),
        .MIN_DELAY(_MP_MIN_DELAY_967297239),
        .NUM_SYNC(_MP_NUM_SYNC_967297239)
    ) btn_cond_right (
        .clk(clk),
        .in(M_btn_cond_right_in),
        .out(M_btn_cond_right_out)
    );
    
    
    localparam _MP_STAGES_268872554 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_268872554)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam _MP_COLUMN_DIMENSION_1373997797 = 16'h10;
    localparam _MP_ROW_DIMENSION_1373997797 = 16'h10;
    localparam _MP_PIXEL_COUNT_1373997797 = 16'h100;
    localparam _MP_BUFFER_SIZE_1373997797 = 11'h400;
    logic M_game_data_path_left_btn;
    logic M_game_data_path_right_btn;
    logic [3:0] M_game_data_path_player_pos_x_out;
    logic [3:0] M_game_data_path_player_pos_y_out;
    logic [31:0] M_game_data_path_player_health_out;
    logic [31:0] M_game_data_path_timer_out;
    logic [31:0] M_game_data_path_score_out;
    logic [31:0] M_game_data_path_sprite_out;
    logic [31:0] M_game_data_path_bullet_color_out;
    logic [31:0] M_game_data_path_player_bullet_x_out;
    logic [31:0] M_game_data_path_player_bullet_y_out;
    logic [31:0] M_game_data_path_enemy_encoding_out;
    logic [31:0] M_game_data_path_stage_counter_out;
    logic [7:0] M_game_data_path_led;
    logic [2:0][7:0] M_game_data_path_io_led;
    logic [7:0] M_game_data_path_io_segment;
    logic [3:0] M_game_data_path_io_select;
    logic M_game_data_path_data_out;
    
    game_data_path #(
        .COLUMN_DIMENSION(_MP_COLUMN_DIMENSION_1373997797),
        .ROW_DIMENSION(_MP_ROW_DIMENSION_1373997797),
        .PIXEL_COUNT(_MP_PIXEL_COUNT_1373997797),
        .BUFFER_SIZE(_MP_BUFFER_SIZE_1373997797)
    ) game_data_path (
        .clk(clk),
        .rst(rst),
        .left_btn(M_game_data_path_left_btn),
        .right_btn(M_game_data_path_right_btn),
        .player_pos_x_out(M_game_data_path_player_pos_x_out),
        .player_pos_y_out(M_game_data_path_player_pos_y_out),
        .player_health_out(M_game_data_path_player_health_out),
        .timer_out(M_game_data_path_timer_out),
        .score_out(M_game_data_path_score_out),
        .sprite_out(M_game_data_path_sprite_out),
        .bullet_color_out(M_game_data_path_bullet_color_out),
        .player_bullet_x_out(M_game_data_path_player_bullet_x_out),
        .player_bullet_y_out(M_game_data_path_player_bullet_y_out),
        .enemy_encoding_out(M_game_data_path_enemy_encoding_out),
        .stage_counter_out(M_game_data_path_stage_counter_out),
        .led(M_game_data_path_led),
        .io_led(M_game_data_path_io_led),
        .io_segment(M_game_data_path_io_segment),
        .io_select(M_game_data_path_io_select),
        .data_out(M_game_data_path_data_out)
    );
    
    
    always @* begin
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        led = 8'h0;
        usb_tx = usb_rx;
        io_segment = 8'hf;
        io_select = 4'hf;
        led = 8'h0;
        data = 1'h0;
        io_led = {{8'h0, 8'h0, 8'h0}};
        M_btn_cond_left_in = io_button[2'h3];
        M_btn_cond_right_in = io_button[3'h4];
        M_edge_dt_btn_left_in = M_btn_cond_left_out;
        M_edge_dt_btn_right_in = M_btn_cond_right_out;
        M_game_data_path_left_btn = M_edge_dt_btn_left_out;
        M_game_data_path_right_btn = M_edge_dt_btn_right_out;
        io_segment = M_game_data_path_io_segment;
        io_select = M_game_data_path_io_select;
        data = M_game_data_path_data_out;
        led = M_game_data_path_led;
        io_led = M_game_data_path_io_led;
    end
    
    
endmodule
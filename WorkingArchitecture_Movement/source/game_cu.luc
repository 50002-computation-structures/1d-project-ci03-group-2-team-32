module game_cu #(
    COLUMN_DIMENSION = 16d16 : COLUMN_DIMENSION > 0,
    ROW_DIMENSION = 16d16 : ROW_DIMENSION > 0,
    PIXEL_COUNT = 16d256 : PIXEL_COUNT > 0,
    BUFFER_SIZE = 1024 : BUFFER_SIZE > 0
) (
    input clk,  // clock
    input rst,  // reset
    input regfile_rd2[32],
    
    //    input red_bullet_btn,
    //    input green_bullet_btn,
    //    input blue_bullet_btn,
    input left_btn,
    input right_btn,
    input shoot_btn,
    //    input start,
    
    //TEST
    //input io_button[5],
    
    
    output alufn_signal[6],
    output asel[3],
    output bsel[3],
    output wdsel[2],
    output regfile_wa[4],
    output regfile_ra1[4],
    output regfile_ra2[4],
    output regfile_we,
    output debug[4]
) {
    enum GameStates {
        IDLE,
        SHOOT,
        CHECK_RIGHT_BOUND,
        CHECK_LEFT_BOUND,
        MOVE_RIGHT,
        MOVE_LEFT,
        TRIGGER_UPDATE
        
    }
    // User input
    //const CLK_FREQ = $is_sim() ? 1000 : 100000000
    //button_conditioner movement_button[5](.clk(5x{{clk}}), #CLK_FREQ(5x{{CLK_FREQ}}))
    //edge_detector movement_button_edge[5](.clk(5x{{clk}}), #RISE(5x{{1}}), #FALL(5x{{0}}))
    dff game_fsm[$width(GameStates)](#INIT(GameStates.IDLE), .clk(clk), .rst(rst))
    
    
    always {
        //movement_button.in = c{io_button[1], io_button[4], io_button[3], io_button[2], io_button[0]}
        //movement_button_edge.in = movement_button.out
        
        // standard setting unless otherwise overwritten by each case 
        alufn_signal = 0
        asel = 0 
        bsel = 0
        regfile_we = 0
        regfile_wa = d6 
        regfile_ra1 = d0
        regfile_ra2 = d0
        wdsel = 0
        
        debug = b0000
        
        if (rst){
            game_fsm.d = GameStates.IDLE
        }
        else{
            
            case(game_fsm.q){ 
                
                GameStates.IDLE: 
                    if (right_btn){     // check movement update x right
                        game_fsm.d = GameStates.CHECK_RIGHT_BOUND
                    }
                    else if(left_btn){
                        game_fsm.d = GameStates.CHECK_LEFT_BOUND 
                    }
                    else if(shoot_btn){
                        game_fsm.d = GameStates.SHOOT
                    }
                    else{
                        game_fsm.d =  GameStates.IDLE
                    }
                
                GameStates.CHECK_RIGHT_BOUND:
                    alufn_signal = b110101        //CMPLT
                    regfile_ra1 = d0              
                    bsel = b010                    //constant 14 (16-2) 
                    asel = b000                                  
                    regfile_we = 1
                    regfile_wa = d11               // temp check right bound
                    game_fsm.d = GameStates.MOVE_RIGHT
                
                GameStates.CHECK_LEFT_BOUND:
                    alufn_signal = b110101        //CMPLT
                    regfile_ra1 = d0              
                    bsel = b011                    //constant 2 
                    asel = b000                                  
                    regfile_we = 1
                    regfile_wa = d12               // temp check bound
                    game_fsm.d = GameStates.MOVE_LEFT
                
                GameStates.MOVE_RIGHT:
                    regfile_ra2 = d11
                    if (regfile_rd2[0]){
                        alufn_signal = b000000         //ADD
                        regfile_ra1 = d0              
                        bsel = b001                    //1
                        asel = b000                                  
                        regfile_we = 1
                        regfile_wa = d0               // player x
                        game_fsm.d = GameStates.TRIGGER_UPDATE
                    }
                    else{
                        game_fsm.d = GameStates.IDLE
                    }
                
                GameStates.MOVE_LEFT:
                    regfile_ra2 = d12
                    if (~regfile_rd2[0]){
                        alufn_signal = b000001         //SUB
                        regfile_ra1 = d0              
                        bsel = b001                    //1
                        asel = b000                                  
                        regfile_we = 1
                        regfile_wa = d0               // player x
                        game_fsm.d = GameStates.TRIGGER_UPDATE
                    }
                    else{
                        game_fsm.d = GameStates.IDLE
                    }
                
                GameStates.TRIGGER_UPDATE:
                    alufn_signal = b000010         //MUL              
                    bsel = b001                    //1
                    asel = b001                                  
                    regfile_we = 1
                    regfile_wa = d15               // update_ram_flag
                    game_fsm.d = GameStates.IDLE
            }
        }
    }
}